
MotionTracking.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e50  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08002fe8  08002fe8  00012fe8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003000  08003000  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003000  08003000  00013000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003008  08003008  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003008  08003008  00013008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800300c  0800300c  0001300c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003010  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002f4  2000000c  0800301c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000300  0800301c  00020300  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000981f  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000016b3  00000000  00000000  0002989e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000009b0  00000000  00000000  0002af58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000772  00000000  00000000  0002b908  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00015815  00000000  00000000  0002c07a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c0e5  00000000  00000000  0004188f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000874b2  00000000  00000000  0004d974  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000285c  00000000  00000000  000d4e28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  000d7684  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08002fd0 	.word	0x08002fd0

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	08002fd0 	.word	0x08002fd0

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b970 	b.w	80004d0 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	460d      	mov	r5, r1
 8000210:	4604      	mov	r4, r0
 8000212:	460f      	mov	r7, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14a      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000218:	428a      	cmp	r2, r1
 800021a:	4694      	mov	ip, r2
 800021c:	d965      	bls.n	80002ea <__udivmoddi4+0xe2>
 800021e:	fab2 f382 	clz	r3, r2
 8000222:	b143      	cbz	r3, 8000236 <__udivmoddi4+0x2e>
 8000224:	fa02 fc03 	lsl.w	ip, r2, r3
 8000228:	f1c3 0220 	rsb	r2, r3, #32
 800022c:	409f      	lsls	r7, r3
 800022e:	fa20 f202 	lsr.w	r2, r0, r2
 8000232:	4317      	orrs	r7, r2
 8000234:	409c      	lsls	r4, r3
 8000236:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800023a:	fa1f f58c 	uxth.w	r5, ip
 800023e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000242:	0c22      	lsrs	r2, r4, #16
 8000244:	fb0e 7711 	mls	r7, lr, r1, r7
 8000248:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800024c:	fb01 f005 	mul.w	r0, r1, r5
 8000250:	4290      	cmp	r0, r2
 8000252:	d90a      	bls.n	800026a <__udivmoddi4+0x62>
 8000254:	eb1c 0202 	adds.w	r2, ip, r2
 8000258:	f101 37ff 	add.w	r7, r1, #4294967295
 800025c:	f080 811c 	bcs.w	8000498 <__udivmoddi4+0x290>
 8000260:	4290      	cmp	r0, r2
 8000262:	f240 8119 	bls.w	8000498 <__udivmoddi4+0x290>
 8000266:	3902      	subs	r1, #2
 8000268:	4462      	add	r2, ip
 800026a:	1a12      	subs	r2, r2, r0
 800026c:	b2a4      	uxth	r4, r4
 800026e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000272:	fb0e 2210 	mls	r2, lr, r0, r2
 8000276:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800027a:	fb00 f505 	mul.w	r5, r0, r5
 800027e:	42a5      	cmp	r5, r4
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x90>
 8000282:	eb1c 0404 	adds.w	r4, ip, r4
 8000286:	f100 32ff 	add.w	r2, r0, #4294967295
 800028a:	f080 8107 	bcs.w	800049c <__udivmoddi4+0x294>
 800028e:	42a5      	cmp	r5, r4
 8000290:	f240 8104 	bls.w	800049c <__udivmoddi4+0x294>
 8000294:	4464      	add	r4, ip
 8000296:	3802      	subs	r0, #2
 8000298:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800029c:	1b64      	subs	r4, r4, r5
 800029e:	2100      	movs	r1, #0
 80002a0:	b11e      	cbz	r6, 80002aa <__udivmoddi4+0xa2>
 80002a2:	40dc      	lsrs	r4, r3
 80002a4:	2300      	movs	r3, #0
 80002a6:	e9c6 4300 	strd	r4, r3, [r6]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d908      	bls.n	80002c4 <__udivmoddi4+0xbc>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80ed 	beq.w	8000492 <__udivmoddi4+0x28a>
 80002b8:	2100      	movs	r1, #0
 80002ba:	e9c6 0500 	strd	r0, r5, [r6]
 80002be:	4608      	mov	r0, r1
 80002c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c4:	fab3 f183 	clz	r1, r3
 80002c8:	2900      	cmp	r1, #0
 80002ca:	d149      	bne.n	8000360 <__udivmoddi4+0x158>
 80002cc:	42ab      	cmp	r3, r5
 80002ce:	d302      	bcc.n	80002d6 <__udivmoddi4+0xce>
 80002d0:	4282      	cmp	r2, r0
 80002d2:	f200 80f8 	bhi.w	80004c6 <__udivmoddi4+0x2be>
 80002d6:	1a84      	subs	r4, r0, r2
 80002d8:	eb65 0203 	sbc.w	r2, r5, r3
 80002dc:	2001      	movs	r0, #1
 80002de:	4617      	mov	r7, r2
 80002e0:	2e00      	cmp	r6, #0
 80002e2:	d0e2      	beq.n	80002aa <__udivmoddi4+0xa2>
 80002e4:	e9c6 4700 	strd	r4, r7, [r6]
 80002e8:	e7df      	b.n	80002aa <__udivmoddi4+0xa2>
 80002ea:	b902      	cbnz	r2, 80002ee <__udivmoddi4+0xe6>
 80002ec:	deff      	udf	#255	; 0xff
 80002ee:	fab2 f382 	clz	r3, r2
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	f040 8090 	bne.w	8000418 <__udivmoddi4+0x210>
 80002f8:	1a8a      	subs	r2, r1, r2
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2101      	movs	r1, #1
 8000304:	fbb2 f5f7 	udiv	r5, r2, r7
 8000308:	fb07 2015 	mls	r0, r7, r5, r2
 800030c:	0c22      	lsrs	r2, r4, #16
 800030e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000312:	fb0e f005 	mul.w	r0, lr, r5
 8000316:	4290      	cmp	r0, r2
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x124>
 800031a:	eb1c 0202 	adds.w	r2, ip, r2
 800031e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4290      	cmp	r0, r2
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2b8>
 800032a:	4645      	mov	r5, r8
 800032c:	1a12      	subs	r2, r2, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb2 f0f7 	udiv	r0, r2, r7
 8000334:	fb07 2210 	mls	r2, r7, r0, r2
 8000338:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x14e>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 32ff 	add.w	r2, r0, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x14c>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2c2>
 8000354:	4610      	mov	r0, r2
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800035e:	e79f      	b.n	80002a0 <__udivmoddi4+0x98>
 8000360:	f1c1 0720 	rsb	r7, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa05 f401 	lsl.w	r4, r5, r1
 8000372:	fa20 f307 	lsr.w	r3, r0, r7
 8000376:	40fd      	lsrs	r5, r7
 8000378:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037c:	4323      	orrs	r3, r4
 800037e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000382:	fa1f fe8c 	uxth.w	lr, ip
 8000386:	fb09 5518 	mls	r5, r9, r8, r5
 800038a:	0c1c      	lsrs	r4, r3, #16
 800038c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000390:	fb08 f50e 	mul.w	r5, r8, lr
 8000394:	42a5      	cmp	r5, r4
 8000396:	fa02 f201 	lsl.w	r2, r2, r1
 800039a:	fa00 f001 	lsl.w	r0, r0, r1
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1c 0404 	adds.w	r4, ip, r4
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2b4>
 80003ac:	42a5      	cmp	r5, r4
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2b4>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4464      	add	r4, ip
 80003b8:	1b64      	subs	r4, r4, r5
 80003ba:	b29d      	uxth	r5, r3
 80003bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c0:	fb09 4413 	mls	r4, r9, r3, r4
 80003c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003cc:	45a6      	cmp	lr, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1c 0404 	adds.w	r4, ip, r4
 80003d4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2ac>
 80003da:	45a6      	cmp	lr, r4
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2ac>
 80003de:	3b02      	subs	r3, #2
 80003e0:	4464      	add	r4, ip
 80003e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003e6:	fba3 9502 	umull	r9, r5, r3, r2
 80003ea:	eba4 040e 	sub.w	r4, r4, lr
 80003ee:	42ac      	cmp	r4, r5
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46ae      	mov	lr, r5
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x29c>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x298>
 80003f8:	b156      	cbz	r6, 8000410 <__udivmoddi4+0x208>
 80003fa:	ebb0 0208 	subs.w	r2, r0, r8
 80003fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000402:	fa04 f707 	lsl.w	r7, r4, r7
 8000406:	40ca      	lsrs	r2, r1
 8000408:	40cc      	lsrs	r4, r1
 800040a:	4317      	orrs	r7, r2
 800040c:	e9c6 7400 	strd	r7, r4, [r6]
 8000410:	4618      	mov	r0, r3
 8000412:	2100      	movs	r1, #0
 8000414:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000418:	f1c3 0120 	rsb	r1, r3, #32
 800041c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000420:	fa20 f201 	lsr.w	r2, r0, r1
 8000424:	fa25 f101 	lsr.w	r1, r5, r1
 8000428:	409d      	lsls	r5, r3
 800042a:	432a      	orrs	r2, r5
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb1 f0f7 	udiv	r0, r1, r7
 8000438:	fb07 1510 	mls	r5, r7, r0, r1
 800043c:	0c11      	lsrs	r1, r2, #16
 800043e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000442:	fb00 f50e 	mul.w	r5, r0, lr
 8000446:	428d      	cmp	r5, r1
 8000448:	fa04 f403 	lsl.w	r4, r4, r3
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x258>
 800044e:	eb1c 0101 	adds.w	r1, ip, r1
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 8000458:	428d      	cmp	r5, r1
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800045c:	3802      	subs	r0, #2
 800045e:	4461      	add	r1, ip
 8000460:	1b49      	subs	r1, r1, r5
 8000462:	b292      	uxth	r2, r2
 8000464:	fbb1 f5f7 	udiv	r5, r1, r7
 8000468:	fb07 1115 	mls	r1, r7, r5, r1
 800046c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000470:	fb05 f10e 	mul.w	r1, r5, lr
 8000474:	4291      	cmp	r1, r2
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x282>
 8000478:	eb1c 0202 	adds.w	r2, ip, r2
 800047c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 8000482:	4291      	cmp	r1, r2
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000486:	3d02      	subs	r5, #2
 8000488:	4462      	add	r2, ip
 800048a:	1a52      	subs	r2, r2, r1
 800048c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0xfc>
 8000492:	4631      	mov	r1, r6
 8000494:	4630      	mov	r0, r6
 8000496:	e708      	b.n	80002aa <__udivmoddi4+0xa2>
 8000498:	4639      	mov	r1, r7
 800049a:	e6e6      	b.n	800026a <__udivmoddi4+0x62>
 800049c:	4610      	mov	r0, r2
 800049e:	e6fb      	b.n	8000298 <__udivmoddi4+0x90>
 80004a0:	4548      	cmp	r0, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ac:	3b01      	subs	r3, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004b0:	4645      	mov	r5, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x282>
 80004b4:	462b      	mov	r3, r5
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x258>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004c0:	3d02      	subs	r5, #2
 80004c2:	4462      	add	r2, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x124>
 80004c6:	4608      	mov	r0, r1
 80004c8:	e70a      	b.n	80002e0 <__udivmoddi4+0xd8>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x14e>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d8:	f000 fa7a 	bl	80009d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004dc:	f000 f808 	bl	80004f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e0:	f000 f8cc 	bl	800067c <MX_GPIO_Init>
  MX_I2C1_Init();
 80004e4:	f000 f86c 	bl	80005c0 <MX_I2C1_Init>
  MX_SDIO_MMC_Init();
 80004e8:	f000 f898 	bl	800061c <MX_SDIO_MMC_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004ec:	e7fe      	b.n	80004ec <main+0x18>
	...

080004f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b094      	sub	sp, #80	; 0x50
 80004f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004f6:	f107 0320 	add.w	r3, r7, #32
 80004fa:	2230      	movs	r2, #48	; 0x30
 80004fc:	2100      	movs	r1, #0
 80004fe:	4618      	mov	r0, r3
 8000500:	f002 fd3a 	bl	8002f78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000504:	f107 030c 	add.w	r3, r7, #12
 8000508:	2200      	movs	r2, #0
 800050a:	601a      	str	r2, [r3, #0]
 800050c:	605a      	str	r2, [r3, #4]
 800050e:	609a      	str	r2, [r3, #8]
 8000510:	60da      	str	r2, [r3, #12]
 8000512:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000514:	2300      	movs	r3, #0
 8000516:	60bb      	str	r3, [r7, #8]
 8000518:	4b27      	ldr	r3, [pc, #156]	; (80005b8 <SystemClock_Config+0xc8>)
 800051a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800051c:	4a26      	ldr	r2, [pc, #152]	; (80005b8 <SystemClock_Config+0xc8>)
 800051e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000522:	6413      	str	r3, [r2, #64]	; 0x40
 8000524:	4b24      	ldr	r3, [pc, #144]	; (80005b8 <SystemClock_Config+0xc8>)
 8000526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000528:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800052c:	60bb      	str	r3, [r7, #8]
 800052e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000530:	2300      	movs	r3, #0
 8000532:	607b      	str	r3, [r7, #4]
 8000534:	4b21      	ldr	r3, [pc, #132]	; (80005bc <SystemClock_Config+0xcc>)
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	4a20      	ldr	r2, [pc, #128]	; (80005bc <SystemClock_Config+0xcc>)
 800053a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800053e:	6013      	str	r3, [r2, #0]
 8000540:	4b1e      	ldr	r3, [pc, #120]	; (80005bc <SystemClock_Config+0xcc>)
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000548:	607b      	str	r3, [r7, #4]
 800054a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800054c:	2302      	movs	r3, #2
 800054e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000550:	2301      	movs	r3, #1
 8000552:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000554:	2310      	movs	r3, #16
 8000556:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000558:	2302      	movs	r3, #2
 800055a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800055c:	2300      	movs	r3, #0
 800055e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000560:	2310      	movs	r3, #16
 8000562:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000564:	23c0      	movs	r3, #192	; 0xc0
 8000566:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000568:	2302      	movs	r3, #2
 800056a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800056c:	2304      	movs	r3, #4
 800056e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000570:	f107 0320 	add.w	r3, r7, #32
 8000574:	4618      	mov	r0, r3
 8000576:	f001 fd07 	bl	8001f88 <HAL_RCC_OscConfig>
 800057a:	4603      	mov	r3, r0
 800057c:	2b00      	cmp	r3, #0
 800057e:	d001      	beq.n	8000584 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000580:	f000 f8c0 	bl	8000704 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000584:	230f      	movs	r3, #15
 8000586:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000588:	2300      	movs	r3, #0
 800058a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800058c:	2300      	movs	r3, #0
 800058e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000590:	2300      	movs	r3, #0
 8000592:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000594:	2300      	movs	r3, #0
 8000596:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000598:	f107 030c 	add.w	r3, r7, #12
 800059c:	2100      	movs	r1, #0
 800059e:	4618      	mov	r0, r3
 80005a0:	f001 ff6a 	bl	8002478 <HAL_RCC_ClockConfig>
 80005a4:	4603      	mov	r3, r0
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d001      	beq.n	80005ae <SystemClock_Config+0xbe>
  {
    Error_Handler();
 80005aa:	f000 f8ab 	bl	8000704 <Error_Handler>
  }
}
 80005ae:	bf00      	nop
 80005b0:	3750      	adds	r7, #80	; 0x50
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bd80      	pop	{r7, pc}
 80005b6:	bf00      	nop
 80005b8:	40023800 	.word	0x40023800
 80005bc:	40007000 	.word	0x40007000

080005c0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005c4:	4b12      	ldr	r3, [pc, #72]	; (8000610 <MX_I2C1_Init+0x50>)
 80005c6:	4a13      	ldr	r2, [pc, #76]	; (8000614 <MX_I2C1_Init+0x54>)
 80005c8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80005ca:	4b11      	ldr	r3, [pc, #68]	; (8000610 <MX_I2C1_Init+0x50>)
 80005cc:	4a12      	ldr	r2, [pc, #72]	; (8000618 <MX_I2C1_Init+0x58>)
 80005ce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80005d0:	4b0f      	ldr	r3, [pc, #60]	; (8000610 <MX_I2C1_Init+0x50>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80005d6:	4b0e      	ldr	r3, [pc, #56]	; (8000610 <MX_I2C1_Init+0x50>)
 80005d8:	2200      	movs	r2, #0
 80005da:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005dc:	4b0c      	ldr	r3, [pc, #48]	; (8000610 <MX_I2C1_Init+0x50>)
 80005de:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80005e2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005e4:	4b0a      	ldr	r3, [pc, #40]	; (8000610 <MX_I2C1_Init+0x50>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80005ea:	4b09      	ldr	r3, [pc, #36]	; (8000610 <MX_I2C1_Init+0x50>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80005f0:	4b07      	ldr	r3, [pc, #28]	; (8000610 <MX_I2C1_Init+0x50>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80005f6:	4b06      	ldr	r3, [pc, #24]	; (8000610 <MX_I2C1_Init+0x50>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80005fc:	4804      	ldr	r0, [pc, #16]	; (8000610 <MX_I2C1_Init+0x50>)
 80005fe:	f000 fce7 	bl	8000fd0 <HAL_I2C_Init>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d001      	beq.n	800060c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000608:	f000 f87c 	bl	8000704 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800060c:	bf00      	nop
 800060e:	bd80      	pop	{r7, pc}
 8000610:	20000028 	.word	0x20000028
 8000614:	40005400 	.word	0x40005400
 8000618:	000186a0 	.word	0x000186a0

0800061c <MX_SDIO_MMC_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_MMC_Init(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hmmc.Instance = SDIO;
 8000620:	4b14      	ldr	r3, [pc, #80]	; (8000674 <MX_SDIO_MMC_Init+0x58>)
 8000622:	4a15      	ldr	r2, [pc, #84]	; (8000678 <MX_SDIO_MMC_Init+0x5c>)
 8000624:	601a      	str	r2, [r3, #0]
  hmmc.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8000626:	4b13      	ldr	r3, [pc, #76]	; (8000674 <MX_SDIO_MMC_Init+0x58>)
 8000628:	2200      	movs	r2, #0
 800062a:	605a      	str	r2, [r3, #4]
  hmmc.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 800062c:	4b11      	ldr	r3, [pc, #68]	; (8000674 <MX_SDIO_MMC_Init+0x58>)
 800062e:	2200      	movs	r2, #0
 8000630:	609a      	str	r2, [r3, #8]
  hmmc.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8000632:	4b10      	ldr	r3, [pc, #64]	; (8000674 <MX_SDIO_MMC_Init+0x58>)
 8000634:	2200      	movs	r2, #0
 8000636:	60da      	str	r2, [r3, #12]
  hmmc.Init.BusWide = SDIO_BUS_WIDE_8B;
 8000638:	4b0e      	ldr	r3, [pc, #56]	; (8000674 <MX_SDIO_MMC_Init+0x58>)
 800063a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800063e:	611a      	str	r2, [r3, #16]
  hmmc.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8000640:	4b0c      	ldr	r3, [pc, #48]	; (8000674 <MX_SDIO_MMC_Init+0x58>)
 8000642:	2200      	movs	r2, #0
 8000644:	615a      	str	r2, [r3, #20]
  hmmc.Init.ClockDiv = 0;
 8000646:	4b0b      	ldr	r3, [pc, #44]	; (8000674 <MX_SDIO_MMC_Init+0x58>)
 8000648:	2200      	movs	r2, #0
 800064a:	619a      	str	r2, [r3, #24]
  if (HAL_MMC_Init(&hmmc) != HAL_OK)
 800064c:	4809      	ldr	r0, [pc, #36]	; (8000674 <MX_SDIO_MMC_Init+0x58>)
 800064e:	f000 fe03 	bl	8001258 <HAL_MMC_Init>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d001      	beq.n	800065c <MX_SDIO_MMC_Init+0x40>
  {
    Error_Handler();
 8000658:	f000 f854 	bl	8000704 <Error_Handler>
  }
  if (HAL_MMC_ConfigWideBusOperation(&hmmc, SDIO_BUS_WIDE_8B) != HAL_OK)
 800065c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000660:	4804      	ldr	r0, [pc, #16]	; (8000674 <MX_SDIO_MMC_Init+0x58>)
 8000662:	f001 f951 	bl	8001908 <HAL_MMC_ConfigWideBusOperation>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d001      	beq.n	8000670 <MX_SDIO_MMC_Init+0x54>
  {
    Error_Handler();
 800066c:	f000 f84a 	bl	8000704 <Error_Handler>
  }
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8000670:	bf00      	nop
 8000672:	bd80      	pop	{r7, pc}
 8000674:	2000007c 	.word	0x2000007c
 8000678:	40012c00 	.word	0x40012c00

0800067c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800067c:	b480      	push	{r7}
 800067e:	b085      	sub	sp, #20
 8000680:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000682:	2300      	movs	r3, #0
 8000684:	60fb      	str	r3, [r7, #12]
 8000686:	4b1e      	ldr	r3, [pc, #120]	; (8000700 <MX_GPIO_Init+0x84>)
 8000688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068a:	4a1d      	ldr	r2, [pc, #116]	; (8000700 <MX_GPIO_Init+0x84>)
 800068c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000690:	6313      	str	r3, [r2, #48]	; 0x30
 8000692:	4b1b      	ldr	r3, [pc, #108]	; (8000700 <MX_GPIO_Init+0x84>)
 8000694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000696:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800069a:	60fb      	str	r3, [r7, #12]
 800069c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800069e:	2300      	movs	r3, #0
 80006a0:	60bb      	str	r3, [r7, #8]
 80006a2:	4b17      	ldr	r3, [pc, #92]	; (8000700 <MX_GPIO_Init+0x84>)
 80006a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a6:	4a16      	ldr	r2, [pc, #88]	; (8000700 <MX_GPIO_Init+0x84>)
 80006a8:	f043 0301 	orr.w	r3, r3, #1
 80006ac:	6313      	str	r3, [r2, #48]	; 0x30
 80006ae:	4b14      	ldr	r3, [pc, #80]	; (8000700 <MX_GPIO_Init+0x84>)
 80006b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b2:	f003 0301 	and.w	r3, r3, #1
 80006b6:	60bb      	str	r3, [r7, #8]
 80006b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006ba:	2300      	movs	r3, #0
 80006bc:	607b      	str	r3, [r7, #4]
 80006be:	4b10      	ldr	r3, [pc, #64]	; (8000700 <MX_GPIO_Init+0x84>)
 80006c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c2:	4a0f      	ldr	r2, [pc, #60]	; (8000700 <MX_GPIO_Init+0x84>)
 80006c4:	f043 0302 	orr.w	r3, r3, #2
 80006c8:	6313      	str	r3, [r2, #48]	; 0x30
 80006ca:	4b0d      	ldr	r3, [pc, #52]	; (8000700 <MX_GPIO_Init+0x84>)
 80006cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ce:	f003 0302 	and.w	r3, r3, #2
 80006d2:	607b      	str	r3, [r7, #4]
 80006d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006d6:	2300      	movs	r3, #0
 80006d8:	603b      	str	r3, [r7, #0]
 80006da:	4b09      	ldr	r3, [pc, #36]	; (8000700 <MX_GPIO_Init+0x84>)
 80006dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006de:	4a08      	ldr	r2, [pc, #32]	; (8000700 <MX_GPIO_Init+0x84>)
 80006e0:	f043 0304 	orr.w	r3, r3, #4
 80006e4:	6313      	str	r3, [r2, #48]	; 0x30
 80006e6:	4b06      	ldr	r3, [pc, #24]	; (8000700 <MX_GPIO_Init+0x84>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ea:	f003 0304 	and.w	r3, r3, #4
 80006ee:	603b      	str	r3, [r7, #0]
 80006f0:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006f2:	bf00      	nop
 80006f4:	3714      	adds	r7, #20
 80006f6:	46bd      	mov	sp, r7
 80006f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fc:	4770      	bx	lr
 80006fe:	bf00      	nop
 8000700:	40023800 	.word	0x40023800

08000704 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000704:	b480      	push	{r7}
 8000706:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000708:	b672      	cpsid	i
}
 800070a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800070c:	e7fe      	b.n	800070c <Error_Handler+0x8>
	...

08000710 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000710:	b480      	push	{r7}
 8000712:	b083      	sub	sp, #12
 8000714:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000716:	2300      	movs	r3, #0
 8000718:	607b      	str	r3, [r7, #4]
 800071a:	4b10      	ldr	r3, [pc, #64]	; (800075c <HAL_MspInit+0x4c>)
 800071c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800071e:	4a0f      	ldr	r2, [pc, #60]	; (800075c <HAL_MspInit+0x4c>)
 8000720:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000724:	6453      	str	r3, [r2, #68]	; 0x44
 8000726:	4b0d      	ldr	r3, [pc, #52]	; (800075c <HAL_MspInit+0x4c>)
 8000728:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800072a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800072e:	607b      	str	r3, [r7, #4]
 8000730:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000732:	2300      	movs	r3, #0
 8000734:	603b      	str	r3, [r7, #0]
 8000736:	4b09      	ldr	r3, [pc, #36]	; (800075c <HAL_MspInit+0x4c>)
 8000738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800073a:	4a08      	ldr	r2, [pc, #32]	; (800075c <HAL_MspInit+0x4c>)
 800073c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000740:	6413      	str	r3, [r2, #64]	; 0x40
 8000742:	4b06      	ldr	r3, [pc, #24]	; (800075c <HAL_MspInit+0x4c>)
 8000744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000746:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800074a:	603b      	str	r3, [r7, #0]
 800074c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800074e:	bf00      	nop
 8000750:	370c      	adds	r7, #12
 8000752:	46bd      	mov	sp, r7
 8000754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000758:	4770      	bx	lr
 800075a:	bf00      	nop
 800075c:	40023800 	.word	0x40023800

08000760 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b08a      	sub	sp, #40	; 0x28
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000768:	f107 0314 	add.w	r3, r7, #20
 800076c:	2200      	movs	r2, #0
 800076e:	601a      	str	r2, [r3, #0]
 8000770:	605a      	str	r2, [r3, #4]
 8000772:	609a      	str	r2, [r3, #8]
 8000774:	60da      	str	r2, [r3, #12]
 8000776:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	4a19      	ldr	r2, [pc, #100]	; (80007e4 <HAL_I2C_MspInit+0x84>)
 800077e:	4293      	cmp	r3, r2
 8000780:	d12b      	bne.n	80007da <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000782:	2300      	movs	r3, #0
 8000784:	613b      	str	r3, [r7, #16]
 8000786:	4b18      	ldr	r3, [pc, #96]	; (80007e8 <HAL_I2C_MspInit+0x88>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	4a17      	ldr	r2, [pc, #92]	; (80007e8 <HAL_I2C_MspInit+0x88>)
 800078c:	f043 0302 	orr.w	r3, r3, #2
 8000790:	6313      	str	r3, [r2, #48]	; 0x30
 8000792:	4b15      	ldr	r3, [pc, #84]	; (80007e8 <HAL_I2C_MspInit+0x88>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	f003 0302 	and.w	r3, r3, #2
 800079a:	613b      	str	r3, [r7, #16]
 800079c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800079e:	23c0      	movs	r3, #192	; 0xc0
 80007a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80007a2:	2312      	movs	r3, #18
 80007a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a6:	2300      	movs	r3, #0
 80007a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007aa:	2303      	movs	r3, #3
 80007ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80007ae:	2304      	movs	r3, #4
 80007b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007b2:	f107 0314 	add.w	r3, r7, #20
 80007b6:	4619      	mov	r1, r3
 80007b8:	480c      	ldr	r0, [pc, #48]	; (80007ec <HAL_I2C_MspInit+0x8c>)
 80007ba:	f000 fa85 	bl	8000cc8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80007be:	2300      	movs	r3, #0
 80007c0:	60fb      	str	r3, [r7, #12]
 80007c2:	4b09      	ldr	r3, [pc, #36]	; (80007e8 <HAL_I2C_MspInit+0x88>)
 80007c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007c6:	4a08      	ldr	r2, [pc, #32]	; (80007e8 <HAL_I2C_MspInit+0x88>)
 80007c8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80007cc:	6413      	str	r3, [r2, #64]	; 0x40
 80007ce:	4b06      	ldr	r3, [pc, #24]	; (80007e8 <HAL_I2C_MspInit+0x88>)
 80007d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80007d6:	60fb      	str	r3, [r7, #12]
 80007d8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80007da:	bf00      	nop
 80007dc:	3728      	adds	r7, #40	; 0x28
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	40005400 	.word	0x40005400
 80007e8:	40023800 	.word	0x40023800
 80007ec:	40020400 	.word	0x40020400

080007f0 <HAL_MMC_MspInit>:
* This function configures the hardware resources used in this example
* @param hmmc: MMC handle pointer
* @retval None
*/
void HAL_MMC_MspInit(MMC_HandleTypeDef* hmmc)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b08c      	sub	sp, #48	; 0x30
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f8:	f107 031c 	add.w	r3, r7, #28
 80007fc:	2200      	movs	r2, #0
 80007fe:	601a      	str	r2, [r3, #0]
 8000800:	605a      	str	r2, [r3, #4]
 8000802:	609a      	str	r2, [r3, #8]
 8000804:	60da      	str	r2, [r3, #12]
 8000806:	611a      	str	r2, [r3, #16]
  if(hmmc->Instance==SDIO)
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	4a38      	ldr	r2, [pc, #224]	; (80008f0 <HAL_MMC_MspInit+0x100>)
 800080e:	4293      	cmp	r3, r2
 8000810:	d16a      	bne.n	80008e8 <HAL_MMC_MspInit+0xf8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8000812:	2300      	movs	r3, #0
 8000814:	61bb      	str	r3, [r7, #24]
 8000816:	4b37      	ldr	r3, [pc, #220]	; (80008f4 <HAL_MMC_MspInit+0x104>)
 8000818:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800081a:	4a36      	ldr	r2, [pc, #216]	; (80008f4 <HAL_MMC_MspInit+0x104>)
 800081c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000820:	6453      	str	r3, [r2, #68]	; 0x44
 8000822:	4b34      	ldr	r3, [pc, #208]	; (80008f4 <HAL_MMC_MspInit+0x104>)
 8000824:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000826:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800082a:	61bb      	str	r3, [r7, #24]
 800082c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800082e:	2300      	movs	r3, #0
 8000830:	617b      	str	r3, [r7, #20]
 8000832:	4b30      	ldr	r3, [pc, #192]	; (80008f4 <HAL_MMC_MspInit+0x104>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000836:	4a2f      	ldr	r2, [pc, #188]	; (80008f4 <HAL_MMC_MspInit+0x104>)
 8000838:	f043 0301 	orr.w	r3, r3, #1
 800083c:	6313      	str	r3, [r2, #48]	; 0x30
 800083e:	4b2d      	ldr	r3, [pc, #180]	; (80008f4 <HAL_MMC_MspInit+0x104>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000842:	f003 0301 	and.w	r3, r3, #1
 8000846:	617b      	str	r3, [r7, #20]
 8000848:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800084a:	2300      	movs	r3, #0
 800084c:	613b      	str	r3, [r7, #16]
 800084e:	4b29      	ldr	r3, [pc, #164]	; (80008f4 <HAL_MMC_MspInit+0x104>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000852:	4a28      	ldr	r2, [pc, #160]	; (80008f4 <HAL_MMC_MspInit+0x104>)
 8000854:	f043 0302 	orr.w	r3, r3, #2
 8000858:	6313      	str	r3, [r2, #48]	; 0x30
 800085a:	4b26      	ldr	r3, [pc, #152]	; (80008f4 <HAL_MMC_MspInit+0x104>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085e:	f003 0302 	and.w	r3, r3, #2
 8000862:	613b      	str	r3, [r7, #16]
 8000864:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000866:	2300      	movs	r3, #0
 8000868:	60fb      	str	r3, [r7, #12]
 800086a:	4b22      	ldr	r3, [pc, #136]	; (80008f4 <HAL_MMC_MspInit+0x104>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086e:	4a21      	ldr	r2, [pc, #132]	; (80008f4 <HAL_MMC_MspInit+0x104>)
 8000870:	f043 0304 	orr.w	r3, r3, #4
 8000874:	6313      	str	r3, [r2, #48]	; 0x30
 8000876:	4b1f      	ldr	r3, [pc, #124]	; (80008f4 <HAL_MMC_MspInit+0x104>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087a:	f003 0304 	and.w	r3, r3, #4
 800087e:	60fb      	str	r3, [r7, #12]
 8000880:	68fb      	ldr	r3, [r7, #12]
    PA9     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PB8     ------> SDIO_D4
    PB9     ------> SDIO_D5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8000882:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000886:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000888:	2302      	movs	r3, #2
 800088a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088c:	2300      	movs	r3, #0
 800088e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000890:	2303      	movs	r3, #3
 8000892:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000894:	230c      	movs	r3, #12
 8000896:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000898:	f107 031c 	add.w	r3, r7, #28
 800089c:	4619      	mov	r1, r3
 800089e:	4816      	ldr	r0, [pc, #88]	; (80008f8 <HAL_MMC_MspInit+0x108>)
 80008a0:	f000 fa12 	bl	8000cc8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_8
 80008a4:	f44f 4347 	mov.w	r3, #50944	; 0xc700
 80008a8:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008aa:	2302      	movs	r3, #2
 80008ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ae:	2300      	movs	r3, #0
 80008b0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008b2:	2303      	movs	r3, #3
 80008b4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80008b6:	230c      	movs	r3, #12
 80008b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008ba:	f107 031c 	add.w	r3, r7, #28
 80008be:	4619      	mov	r1, r3
 80008c0:	480e      	ldr	r0, [pc, #56]	; (80008fc <HAL_MMC_MspInit+0x10c>)
 80008c2:	f000 fa01 	bl	8000cc8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11;
 80008c6:	f44f 6330 	mov.w	r3, #2816	; 0xb00
 80008ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008cc:	2302      	movs	r3, #2
 80008ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d0:	2300      	movs	r3, #0
 80008d2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008d4:	2303      	movs	r3, #3
 80008d6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80008d8:	230c      	movs	r3, #12
 80008da:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008dc:	f107 031c 	add.w	r3, r7, #28
 80008e0:	4619      	mov	r1, r3
 80008e2:	4807      	ldr	r0, [pc, #28]	; (8000900 <HAL_MMC_MspInit+0x110>)
 80008e4:	f000 f9f0 	bl	8000cc8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 80008e8:	bf00      	nop
 80008ea:	3730      	adds	r7, #48	; 0x30
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	40012c00 	.word	0x40012c00
 80008f4:	40023800 	.word	0x40023800
 80008f8:	40020000 	.word	0x40020000
 80008fc:	40020400 	.word	0x40020400
 8000900:	40020800 	.word	0x40020800

08000904 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000908:	e7fe      	b.n	8000908 <NMI_Handler+0x4>

0800090a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800090a:	b480      	push	{r7}
 800090c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800090e:	e7fe      	b.n	800090e <HardFault_Handler+0x4>

08000910 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000914:	e7fe      	b.n	8000914 <MemManage_Handler+0x4>

08000916 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000916:	b480      	push	{r7}
 8000918:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800091a:	e7fe      	b.n	800091a <BusFault_Handler+0x4>

0800091c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000920:	e7fe      	b.n	8000920 <UsageFault_Handler+0x4>

08000922 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000922:	b480      	push	{r7}
 8000924:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000926:	bf00      	nop
 8000928:	46bd      	mov	sp, r7
 800092a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092e:	4770      	bx	lr

08000930 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000934:	bf00      	nop
 8000936:	46bd      	mov	sp, r7
 8000938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093c:	4770      	bx	lr

0800093e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800093e:	b480      	push	{r7}
 8000940:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000942:	bf00      	nop
 8000944:	46bd      	mov	sp, r7
 8000946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094a:	4770      	bx	lr

0800094c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000950:	f000 f890 	bl	8000a74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000954:	bf00      	nop
 8000956:	bd80      	pop	{r7, pc}

08000958 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800095c:	4b06      	ldr	r3, [pc, #24]	; (8000978 <SystemInit+0x20>)
 800095e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000962:	4a05      	ldr	r2, [pc, #20]	; (8000978 <SystemInit+0x20>)
 8000964:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000968:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800096c:	bf00      	nop
 800096e:	46bd      	mov	sp, r7
 8000970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop
 8000978:	e000ed00 	.word	0xe000ed00

0800097c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800097c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009b4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000980:	f7ff ffea 	bl	8000958 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000984:	480c      	ldr	r0, [pc, #48]	; (80009b8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000986:	490d      	ldr	r1, [pc, #52]	; (80009bc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000988:	4a0d      	ldr	r2, [pc, #52]	; (80009c0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800098a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800098c:	e002      	b.n	8000994 <LoopCopyDataInit>

0800098e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800098e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000990:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000992:	3304      	adds	r3, #4

08000994 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000994:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000996:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000998:	d3f9      	bcc.n	800098e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800099a:	4a0a      	ldr	r2, [pc, #40]	; (80009c4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800099c:	4c0a      	ldr	r4, [pc, #40]	; (80009c8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800099e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009a0:	e001      	b.n	80009a6 <LoopFillZerobss>

080009a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009a4:	3204      	adds	r2, #4

080009a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009a8:	d3fb      	bcc.n	80009a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80009aa:	f002 faed 	bl	8002f88 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009ae:	f7ff fd91 	bl	80004d4 <main>
  bx  lr    
 80009b2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80009b4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80009b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009bc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80009c0:	08003010 	.word	0x08003010
  ldr r2, =_sbss
 80009c4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80009c8:	20000300 	.word	0x20000300

080009cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009cc:	e7fe      	b.n	80009cc <ADC_IRQHandler>
	...

080009d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80009d4:	4b0e      	ldr	r3, [pc, #56]	; (8000a10 <HAL_Init+0x40>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	4a0d      	ldr	r2, [pc, #52]	; (8000a10 <HAL_Init+0x40>)
 80009da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80009de:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80009e0:	4b0b      	ldr	r3, [pc, #44]	; (8000a10 <HAL_Init+0x40>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	4a0a      	ldr	r2, [pc, #40]	; (8000a10 <HAL_Init+0x40>)
 80009e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80009ea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009ec:	4b08      	ldr	r3, [pc, #32]	; (8000a10 <HAL_Init+0x40>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	4a07      	ldr	r2, [pc, #28]	; (8000a10 <HAL_Init+0x40>)
 80009f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009f8:	2003      	movs	r0, #3
 80009fa:	f000 f931 	bl	8000c60 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009fe:	200f      	movs	r0, #15
 8000a00:	f000 f808 	bl	8000a14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a04:	f7ff fe84 	bl	8000710 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a08:	2300      	movs	r3, #0
}
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	40023c00 	.word	0x40023c00

08000a14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b082      	sub	sp, #8
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a1c:	4b12      	ldr	r3, [pc, #72]	; (8000a68 <HAL_InitTick+0x54>)
 8000a1e:	681a      	ldr	r2, [r3, #0]
 8000a20:	4b12      	ldr	r3, [pc, #72]	; (8000a6c <HAL_InitTick+0x58>)
 8000a22:	781b      	ldrb	r3, [r3, #0]
 8000a24:	4619      	mov	r1, r3
 8000a26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a32:	4618      	mov	r0, r3
 8000a34:	f000 f93b 	bl	8000cae <HAL_SYSTICK_Config>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d001      	beq.n	8000a42 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a3e:	2301      	movs	r3, #1
 8000a40:	e00e      	b.n	8000a60 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	2b0f      	cmp	r3, #15
 8000a46:	d80a      	bhi.n	8000a5e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a48:	2200      	movs	r2, #0
 8000a4a:	6879      	ldr	r1, [r7, #4]
 8000a4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a50:	f000 f911 	bl	8000c76 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a54:	4a06      	ldr	r2, [pc, #24]	; (8000a70 <HAL_InitTick+0x5c>)
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	e000      	b.n	8000a60 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a5e:	2301      	movs	r3, #1
}
 8000a60:	4618      	mov	r0, r3
 8000a62:	3708      	adds	r7, #8
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	20000000 	.word	0x20000000
 8000a6c:	20000008 	.word	0x20000008
 8000a70:	20000004 	.word	0x20000004

08000a74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a78:	4b06      	ldr	r3, [pc, #24]	; (8000a94 <HAL_IncTick+0x20>)
 8000a7a:	781b      	ldrb	r3, [r3, #0]
 8000a7c:	461a      	mov	r2, r3
 8000a7e:	4b06      	ldr	r3, [pc, #24]	; (8000a98 <HAL_IncTick+0x24>)
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	4413      	add	r3, r2
 8000a84:	4a04      	ldr	r2, [pc, #16]	; (8000a98 <HAL_IncTick+0x24>)
 8000a86:	6013      	str	r3, [r2, #0]
}
 8000a88:	bf00      	nop
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop
 8000a94:	20000008 	.word	0x20000008
 8000a98:	200002fc 	.word	0x200002fc

08000a9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
  return uwTick;
 8000aa0:	4b03      	ldr	r3, [pc, #12]	; (8000ab0 <HAL_GetTick+0x14>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
}
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop
 8000ab0:	200002fc 	.word	0x200002fc

08000ab4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b084      	sub	sp, #16
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000abc:	f7ff ffee 	bl	8000a9c <HAL_GetTick>
 8000ac0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ac6:	68fb      	ldr	r3, [r7, #12]
 8000ac8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000acc:	d005      	beq.n	8000ada <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ace:	4b0a      	ldr	r3, [pc, #40]	; (8000af8 <HAL_Delay+0x44>)
 8000ad0:	781b      	ldrb	r3, [r3, #0]
 8000ad2:	461a      	mov	r2, r3
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	4413      	add	r3, r2
 8000ad8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000ada:	bf00      	nop
 8000adc:	f7ff ffde 	bl	8000a9c <HAL_GetTick>
 8000ae0:	4602      	mov	r2, r0
 8000ae2:	68bb      	ldr	r3, [r7, #8]
 8000ae4:	1ad3      	subs	r3, r2, r3
 8000ae6:	68fa      	ldr	r2, [r7, #12]
 8000ae8:	429a      	cmp	r2, r3
 8000aea:	d8f7      	bhi.n	8000adc <HAL_Delay+0x28>
  {
  }
}
 8000aec:	bf00      	nop
 8000aee:	bf00      	nop
 8000af0:	3710      	adds	r7, #16
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	20000008 	.word	0x20000008

08000afc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000afc:	b480      	push	{r7}
 8000afe:	b085      	sub	sp, #20
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	f003 0307 	and.w	r3, r3, #7
 8000b0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b0c:	4b0c      	ldr	r3, [pc, #48]	; (8000b40 <__NVIC_SetPriorityGrouping+0x44>)
 8000b0e:	68db      	ldr	r3, [r3, #12]
 8000b10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b12:	68ba      	ldr	r2, [r7, #8]
 8000b14:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b18:	4013      	ands	r3, r2
 8000b1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b20:	68bb      	ldr	r3, [r7, #8]
 8000b22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b24:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b2e:	4a04      	ldr	r2, [pc, #16]	; (8000b40 <__NVIC_SetPriorityGrouping+0x44>)
 8000b30:	68bb      	ldr	r3, [r7, #8]
 8000b32:	60d3      	str	r3, [r2, #12]
}
 8000b34:	bf00      	nop
 8000b36:	3714      	adds	r7, #20
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3e:	4770      	bx	lr
 8000b40:	e000ed00 	.word	0xe000ed00

08000b44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b48:	4b04      	ldr	r3, [pc, #16]	; (8000b5c <__NVIC_GetPriorityGrouping+0x18>)
 8000b4a:	68db      	ldr	r3, [r3, #12]
 8000b4c:	0a1b      	lsrs	r3, r3, #8
 8000b4e:	f003 0307 	and.w	r3, r3, #7
}
 8000b52:	4618      	mov	r0, r3
 8000b54:	46bd      	mov	sp, r7
 8000b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5a:	4770      	bx	lr
 8000b5c:	e000ed00 	.word	0xe000ed00

08000b60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b60:	b480      	push	{r7}
 8000b62:	b083      	sub	sp, #12
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	4603      	mov	r3, r0
 8000b68:	6039      	str	r1, [r7, #0]
 8000b6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	db0a      	blt.n	8000b8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b74:	683b      	ldr	r3, [r7, #0]
 8000b76:	b2da      	uxtb	r2, r3
 8000b78:	490c      	ldr	r1, [pc, #48]	; (8000bac <__NVIC_SetPriority+0x4c>)
 8000b7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b7e:	0112      	lsls	r2, r2, #4
 8000b80:	b2d2      	uxtb	r2, r2
 8000b82:	440b      	add	r3, r1
 8000b84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b88:	e00a      	b.n	8000ba0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b8a:	683b      	ldr	r3, [r7, #0]
 8000b8c:	b2da      	uxtb	r2, r3
 8000b8e:	4908      	ldr	r1, [pc, #32]	; (8000bb0 <__NVIC_SetPriority+0x50>)
 8000b90:	79fb      	ldrb	r3, [r7, #7]
 8000b92:	f003 030f 	and.w	r3, r3, #15
 8000b96:	3b04      	subs	r3, #4
 8000b98:	0112      	lsls	r2, r2, #4
 8000b9a:	b2d2      	uxtb	r2, r2
 8000b9c:	440b      	add	r3, r1
 8000b9e:	761a      	strb	r2, [r3, #24]
}
 8000ba0:	bf00      	nop
 8000ba2:	370c      	adds	r7, #12
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000baa:	4770      	bx	lr
 8000bac:	e000e100 	.word	0xe000e100
 8000bb0:	e000ed00 	.word	0xe000ed00

08000bb4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	b089      	sub	sp, #36	; 0x24
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	60f8      	str	r0, [r7, #12]
 8000bbc:	60b9      	str	r1, [r7, #8]
 8000bbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	f003 0307 	and.w	r3, r3, #7
 8000bc6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bc8:	69fb      	ldr	r3, [r7, #28]
 8000bca:	f1c3 0307 	rsb	r3, r3, #7
 8000bce:	2b04      	cmp	r3, #4
 8000bd0:	bf28      	it	cs
 8000bd2:	2304      	movcs	r3, #4
 8000bd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bd6:	69fb      	ldr	r3, [r7, #28]
 8000bd8:	3304      	adds	r3, #4
 8000bda:	2b06      	cmp	r3, #6
 8000bdc:	d902      	bls.n	8000be4 <NVIC_EncodePriority+0x30>
 8000bde:	69fb      	ldr	r3, [r7, #28]
 8000be0:	3b03      	subs	r3, #3
 8000be2:	e000      	b.n	8000be6 <NVIC_EncodePriority+0x32>
 8000be4:	2300      	movs	r3, #0
 8000be6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000be8:	f04f 32ff 	mov.w	r2, #4294967295
 8000bec:	69bb      	ldr	r3, [r7, #24]
 8000bee:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf2:	43da      	mvns	r2, r3
 8000bf4:	68bb      	ldr	r3, [r7, #8]
 8000bf6:	401a      	ands	r2, r3
 8000bf8:	697b      	ldr	r3, [r7, #20]
 8000bfa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bfc:	f04f 31ff 	mov.w	r1, #4294967295
 8000c00:	697b      	ldr	r3, [r7, #20]
 8000c02:	fa01 f303 	lsl.w	r3, r1, r3
 8000c06:	43d9      	mvns	r1, r3
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c0c:	4313      	orrs	r3, r2
         );
}
 8000c0e:	4618      	mov	r0, r3
 8000c10:	3724      	adds	r7, #36	; 0x24
 8000c12:	46bd      	mov	sp, r7
 8000c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c18:	4770      	bx	lr
	...

08000c1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b082      	sub	sp, #8
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	3b01      	subs	r3, #1
 8000c28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c2c:	d301      	bcc.n	8000c32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c2e:	2301      	movs	r3, #1
 8000c30:	e00f      	b.n	8000c52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c32:	4a0a      	ldr	r2, [pc, #40]	; (8000c5c <SysTick_Config+0x40>)
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	3b01      	subs	r3, #1
 8000c38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c3a:	210f      	movs	r1, #15
 8000c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c40:	f7ff ff8e 	bl	8000b60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c44:	4b05      	ldr	r3, [pc, #20]	; (8000c5c <SysTick_Config+0x40>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c4a:	4b04      	ldr	r3, [pc, #16]	; (8000c5c <SysTick_Config+0x40>)
 8000c4c:	2207      	movs	r2, #7
 8000c4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c50:	2300      	movs	r3, #0
}
 8000c52:	4618      	mov	r0, r3
 8000c54:	3708      	adds	r7, #8
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	e000e010 	.word	0xe000e010

08000c60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b082      	sub	sp, #8
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c68:	6878      	ldr	r0, [r7, #4]
 8000c6a:	f7ff ff47 	bl	8000afc <__NVIC_SetPriorityGrouping>
}
 8000c6e:	bf00      	nop
 8000c70:	3708      	adds	r7, #8
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}

08000c76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c76:	b580      	push	{r7, lr}
 8000c78:	b086      	sub	sp, #24
 8000c7a:	af00      	add	r7, sp, #0
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	60b9      	str	r1, [r7, #8]
 8000c80:	607a      	str	r2, [r7, #4]
 8000c82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c84:	2300      	movs	r3, #0
 8000c86:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c88:	f7ff ff5c 	bl	8000b44 <__NVIC_GetPriorityGrouping>
 8000c8c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c8e:	687a      	ldr	r2, [r7, #4]
 8000c90:	68b9      	ldr	r1, [r7, #8]
 8000c92:	6978      	ldr	r0, [r7, #20]
 8000c94:	f7ff ff8e 	bl	8000bb4 <NVIC_EncodePriority>
 8000c98:	4602      	mov	r2, r0
 8000c9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c9e:	4611      	mov	r1, r2
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f7ff ff5d 	bl	8000b60 <__NVIC_SetPriority>
}
 8000ca6:	bf00      	nop
 8000ca8:	3718      	adds	r7, #24
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}

08000cae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cae:	b580      	push	{r7, lr}
 8000cb0:	b082      	sub	sp, #8
 8000cb2:	af00      	add	r7, sp, #0
 8000cb4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cb6:	6878      	ldr	r0, [r7, #4]
 8000cb8:	f7ff ffb0 	bl	8000c1c <SysTick_Config>
 8000cbc:	4603      	mov	r3, r0
}
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	3708      	adds	r7, #8
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}
	...

08000cc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	b089      	sub	sp, #36	; 0x24
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
 8000cd0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000cde:	2300      	movs	r3, #0
 8000ce0:	61fb      	str	r3, [r7, #28]
 8000ce2:	e159      	b.n	8000f98 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000ce4:	2201      	movs	r2, #1
 8000ce6:	69fb      	ldr	r3, [r7, #28]
 8000ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000cee:	683b      	ldr	r3, [r7, #0]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	697a      	ldr	r2, [r7, #20]
 8000cf4:	4013      	ands	r3, r2
 8000cf6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000cf8:	693a      	ldr	r2, [r7, #16]
 8000cfa:	697b      	ldr	r3, [r7, #20]
 8000cfc:	429a      	cmp	r2, r3
 8000cfe:	f040 8148 	bne.w	8000f92 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	685b      	ldr	r3, [r3, #4]
 8000d06:	f003 0303 	and.w	r3, r3, #3
 8000d0a:	2b01      	cmp	r3, #1
 8000d0c:	d005      	beq.n	8000d1a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d0e:	683b      	ldr	r3, [r7, #0]
 8000d10:	685b      	ldr	r3, [r3, #4]
 8000d12:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d16:	2b02      	cmp	r3, #2
 8000d18:	d130      	bne.n	8000d7c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	689b      	ldr	r3, [r3, #8]
 8000d1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d20:	69fb      	ldr	r3, [r7, #28]
 8000d22:	005b      	lsls	r3, r3, #1
 8000d24:	2203      	movs	r2, #3
 8000d26:	fa02 f303 	lsl.w	r3, r2, r3
 8000d2a:	43db      	mvns	r3, r3
 8000d2c:	69ba      	ldr	r2, [r7, #24]
 8000d2e:	4013      	ands	r3, r2
 8000d30:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	68da      	ldr	r2, [r3, #12]
 8000d36:	69fb      	ldr	r3, [r7, #28]
 8000d38:	005b      	lsls	r3, r3, #1
 8000d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3e:	69ba      	ldr	r2, [r7, #24]
 8000d40:	4313      	orrs	r3, r2
 8000d42:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	69ba      	ldr	r2, [r7, #24]
 8000d48:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	685b      	ldr	r3, [r3, #4]
 8000d4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d50:	2201      	movs	r2, #1
 8000d52:	69fb      	ldr	r3, [r7, #28]
 8000d54:	fa02 f303 	lsl.w	r3, r2, r3
 8000d58:	43db      	mvns	r3, r3
 8000d5a:	69ba      	ldr	r2, [r7, #24]
 8000d5c:	4013      	ands	r3, r2
 8000d5e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	685b      	ldr	r3, [r3, #4]
 8000d64:	091b      	lsrs	r3, r3, #4
 8000d66:	f003 0201 	and.w	r2, r3, #1
 8000d6a:	69fb      	ldr	r3, [r7, #28]
 8000d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d70:	69ba      	ldr	r2, [r7, #24]
 8000d72:	4313      	orrs	r3, r2
 8000d74:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	69ba      	ldr	r2, [r7, #24]
 8000d7a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	685b      	ldr	r3, [r3, #4]
 8000d80:	f003 0303 	and.w	r3, r3, #3
 8000d84:	2b03      	cmp	r3, #3
 8000d86:	d017      	beq.n	8000db8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	68db      	ldr	r3, [r3, #12]
 8000d8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d8e:	69fb      	ldr	r3, [r7, #28]
 8000d90:	005b      	lsls	r3, r3, #1
 8000d92:	2203      	movs	r2, #3
 8000d94:	fa02 f303 	lsl.w	r3, r2, r3
 8000d98:	43db      	mvns	r3, r3
 8000d9a:	69ba      	ldr	r2, [r7, #24]
 8000d9c:	4013      	ands	r3, r2
 8000d9e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000da0:	683b      	ldr	r3, [r7, #0]
 8000da2:	689a      	ldr	r2, [r3, #8]
 8000da4:	69fb      	ldr	r3, [r7, #28]
 8000da6:	005b      	lsls	r3, r3, #1
 8000da8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dac:	69ba      	ldr	r2, [r7, #24]
 8000dae:	4313      	orrs	r3, r2
 8000db0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	69ba      	ldr	r2, [r7, #24]
 8000db6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	685b      	ldr	r3, [r3, #4]
 8000dbc:	f003 0303 	and.w	r3, r3, #3
 8000dc0:	2b02      	cmp	r3, #2
 8000dc2:	d123      	bne.n	8000e0c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000dc4:	69fb      	ldr	r3, [r7, #28]
 8000dc6:	08da      	lsrs	r2, r3, #3
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	3208      	adds	r2, #8
 8000dcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000dd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000dd2:	69fb      	ldr	r3, [r7, #28]
 8000dd4:	f003 0307 	and.w	r3, r3, #7
 8000dd8:	009b      	lsls	r3, r3, #2
 8000dda:	220f      	movs	r2, #15
 8000ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8000de0:	43db      	mvns	r3, r3
 8000de2:	69ba      	ldr	r2, [r7, #24]
 8000de4:	4013      	ands	r3, r2
 8000de6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	691a      	ldr	r2, [r3, #16]
 8000dec:	69fb      	ldr	r3, [r7, #28]
 8000dee:	f003 0307 	and.w	r3, r3, #7
 8000df2:	009b      	lsls	r3, r3, #2
 8000df4:	fa02 f303 	lsl.w	r3, r2, r3
 8000df8:	69ba      	ldr	r2, [r7, #24]
 8000dfa:	4313      	orrs	r3, r2
 8000dfc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000dfe:	69fb      	ldr	r3, [r7, #28]
 8000e00:	08da      	lsrs	r2, r3, #3
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	3208      	adds	r2, #8
 8000e06:	69b9      	ldr	r1, [r7, #24]
 8000e08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e12:	69fb      	ldr	r3, [r7, #28]
 8000e14:	005b      	lsls	r3, r3, #1
 8000e16:	2203      	movs	r2, #3
 8000e18:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1c:	43db      	mvns	r3, r3
 8000e1e:	69ba      	ldr	r2, [r7, #24]
 8000e20:	4013      	ands	r3, r2
 8000e22:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	685b      	ldr	r3, [r3, #4]
 8000e28:	f003 0203 	and.w	r2, r3, #3
 8000e2c:	69fb      	ldr	r3, [r7, #28]
 8000e2e:	005b      	lsls	r3, r3, #1
 8000e30:	fa02 f303 	lsl.w	r3, r2, r3
 8000e34:	69ba      	ldr	r2, [r7, #24]
 8000e36:	4313      	orrs	r3, r2
 8000e38:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	69ba      	ldr	r2, [r7, #24]
 8000e3e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	685b      	ldr	r3, [r3, #4]
 8000e44:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	f000 80a2 	beq.w	8000f92 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e4e:	2300      	movs	r3, #0
 8000e50:	60fb      	str	r3, [r7, #12]
 8000e52:	4b57      	ldr	r3, [pc, #348]	; (8000fb0 <HAL_GPIO_Init+0x2e8>)
 8000e54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e56:	4a56      	ldr	r2, [pc, #344]	; (8000fb0 <HAL_GPIO_Init+0x2e8>)
 8000e58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e5c:	6453      	str	r3, [r2, #68]	; 0x44
 8000e5e:	4b54      	ldr	r3, [pc, #336]	; (8000fb0 <HAL_GPIO_Init+0x2e8>)
 8000e60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e66:	60fb      	str	r3, [r7, #12]
 8000e68:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e6a:	4a52      	ldr	r2, [pc, #328]	; (8000fb4 <HAL_GPIO_Init+0x2ec>)
 8000e6c:	69fb      	ldr	r3, [r7, #28]
 8000e6e:	089b      	lsrs	r3, r3, #2
 8000e70:	3302      	adds	r3, #2
 8000e72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e76:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e78:	69fb      	ldr	r3, [r7, #28]
 8000e7a:	f003 0303 	and.w	r3, r3, #3
 8000e7e:	009b      	lsls	r3, r3, #2
 8000e80:	220f      	movs	r2, #15
 8000e82:	fa02 f303 	lsl.w	r3, r2, r3
 8000e86:	43db      	mvns	r3, r3
 8000e88:	69ba      	ldr	r2, [r7, #24]
 8000e8a:	4013      	ands	r3, r2
 8000e8c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	4a49      	ldr	r2, [pc, #292]	; (8000fb8 <HAL_GPIO_Init+0x2f0>)
 8000e92:	4293      	cmp	r3, r2
 8000e94:	d019      	beq.n	8000eca <HAL_GPIO_Init+0x202>
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	4a48      	ldr	r2, [pc, #288]	; (8000fbc <HAL_GPIO_Init+0x2f4>)
 8000e9a:	4293      	cmp	r3, r2
 8000e9c:	d013      	beq.n	8000ec6 <HAL_GPIO_Init+0x1fe>
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	4a47      	ldr	r2, [pc, #284]	; (8000fc0 <HAL_GPIO_Init+0x2f8>)
 8000ea2:	4293      	cmp	r3, r2
 8000ea4:	d00d      	beq.n	8000ec2 <HAL_GPIO_Init+0x1fa>
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	4a46      	ldr	r2, [pc, #280]	; (8000fc4 <HAL_GPIO_Init+0x2fc>)
 8000eaa:	4293      	cmp	r3, r2
 8000eac:	d007      	beq.n	8000ebe <HAL_GPIO_Init+0x1f6>
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	4a45      	ldr	r2, [pc, #276]	; (8000fc8 <HAL_GPIO_Init+0x300>)
 8000eb2:	4293      	cmp	r3, r2
 8000eb4:	d101      	bne.n	8000eba <HAL_GPIO_Init+0x1f2>
 8000eb6:	2304      	movs	r3, #4
 8000eb8:	e008      	b.n	8000ecc <HAL_GPIO_Init+0x204>
 8000eba:	2307      	movs	r3, #7
 8000ebc:	e006      	b.n	8000ecc <HAL_GPIO_Init+0x204>
 8000ebe:	2303      	movs	r3, #3
 8000ec0:	e004      	b.n	8000ecc <HAL_GPIO_Init+0x204>
 8000ec2:	2302      	movs	r3, #2
 8000ec4:	e002      	b.n	8000ecc <HAL_GPIO_Init+0x204>
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	e000      	b.n	8000ecc <HAL_GPIO_Init+0x204>
 8000eca:	2300      	movs	r3, #0
 8000ecc:	69fa      	ldr	r2, [r7, #28]
 8000ece:	f002 0203 	and.w	r2, r2, #3
 8000ed2:	0092      	lsls	r2, r2, #2
 8000ed4:	4093      	lsls	r3, r2
 8000ed6:	69ba      	ldr	r2, [r7, #24]
 8000ed8:	4313      	orrs	r3, r2
 8000eda:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000edc:	4935      	ldr	r1, [pc, #212]	; (8000fb4 <HAL_GPIO_Init+0x2ec>)
 8000ede:	69fb      	ldr	r3, [r7, #28]
 8000ee0:	089b      	lsrs	r3, r3, #2
 8000ee2:	3302      	adds	r3, #2
 8000ee4:	69ba      	ldr	r2, [r7, #24]
 8000ee6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000eea:	4b38      	ldr	r3, [pc, #224]	; (8000fcc <HAL_GPIO_Init+0x304>)
 8000eec:	689b      	ldr	r3, [r3, #8]
 8000eee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ef0:	693b      	ldr	r3, [r7, #16]
 8000ef2:	43db      	mvns	r3, r3
 8000ef4:	69ba      	ldr	r2, [r7, #24]
 8000ef6:	4013      	ands	r3, r2
 8000ef8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	685b      	ldr	r3, [r3, #4]
 8000efe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d003      	beq.n	8000f0e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000f06:	69ba      	ldr	r2, [r7, #24]
 8000f08:	693b      	ldr	r3, [r7, #16]
 8000f0a:	4313      	orrs	r3, r2
 8000f0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f0e:	4a2f      	ldr	r2, [pc, #188]	; (8000fcc <HAL_GPIO_Init+0x304>)
 8000f10:	69bb      	ldr	r3, [r7, #24]
 8000f12:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f14:	4b2d      	ldr	r3, [pc, #180]	; (8000fcc <HAL_GPIO_Init+0x304>)
 8000f16:	68db      	ldr	r3, [r3, #12]
 8000f18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f1a:	693b      	ldr	r3, [r7, #16]
 8000f1c:	43db      	mvns	r3, r3
 8000f1e:	69ba      	ldr	r2, [r7, #24]
 8000f20:	4013      	ands	r3, r2
 8000f22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	685b      	ldr	r3, [r3, #4]
 8000f28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d003      	beq.n	8000f38 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000f30:	69ba      	ldr	r2, [r7, #24]
 8000f32:	693b      	ldr	r3, [r7, #16]
 8000f34:	4313      	orrs	r3, r2
 8000f36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f38:	4a24      	ldr	r2, [pc, #144]	; (8000fcc <HAL_GPIO_Init+0x304>)
 8000f3a:	69bb      	ldr	r3, [r7, #24]
 8000f3c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000f3e:	4b23      	ldr	r3, [pc, #140]	; (8000fcc <HAL_GPIO_Init+0x304>)
 8000f40:	685b      	ldr	r3, [r3, #4]
 8000f42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f44:	693b      	ldr	r3, [r7, #16]
 8000f46:	43db      	mvns	r3, r3
 8000f48:	69ba      	ldr	r2, [r7, #24]
 8000f4a:	4013      	ands	r3, r2
 8000f4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	685b      	ldr	r3, [r3, #4]
 8000f52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d003      	beq.n	8000f62 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000f5a:	69ba      	ldr	r2, [r7, #24]
 8000f5c:	693b      	ldr	r3, [r7, #16]
 8000f5e:	4313      	orrs	r3, r2
 8000f60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000f62:	4a1a      	ldr	r2, [pc, #104]	; (8000fcc <HAL_GPIO_Init+0x304>)
 8000f64:	69bb      	ldr	r3, [r7, #24]
 8000f66:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f68:	4b18      	ldr	r3, [pc, #96]	; (8000fcc <HAL_GPIO_Init+0x304>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f6e:	693b      	ldr	r3, [r7, #16]
 8000f70:	43db      	mvns	r3, r3
 8000f72:	69ba      	ldr	r2, [r7, #24]
 8000f74:	4013      	ands	r3, r2
 8000f76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	685b      	ldr	r3, [r3, #4]
 8000f7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d003      	beq.n	8000f8c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000f84:	69ba      	ldr	r2, [r7, #24]
 8000f86:	693b      	ldr	r3, [r7, #16]
 8000f88:	4313      	orrs	r3, r2
 8000f8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f8c:	4a0f      	ldr	r2, [pc, #60]	; (8000fcc <HAL_GPIO_Init+0x304>)
 8000f8e:	69bb      	ldr	r3, [r7, #24]
 8000f90:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f92:	69fb      	ldr	r3, [r7, #28]
 8000f94:	3301      	adds	r3, #1
 8000f96:	61fb      	str	r3, [r7, #28]
 8000f98:	69fb      	ldr	r3, [r7, #28]
 8000f9a:	2b0f      	cmp	r3, #15
 8000f9c:	f67f aea2 	bls.w	8000ce4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000fa0:	bf00      	nop
 8000fa2:	bf00      	nop
 8000fa4:	3724      	adds	r7, #36	; 0x24
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr
 8000fae:	bf00      	nop
 8000fb0:	40023800 	.word	0x40023800
 8000fb4:	40013800 	.word	0x40013800
 8000fb8:	40020000 	.word	0x40020000
 8000fbc:	40020400 	.word	0x40020400
 8000fc0:	40020800 	.word	0x40020800
 8000fc4:	40020c00 	.word	0x40020c00
 8000fc8:	40021000 	.word	0x40021000
 8000fcc:	40013c00 	.word	0x40013c00

08000fd0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b084      	sub	sp, #16
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d101      	bne.n	8000fe2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000fde:	2301      	movs	r3, #1
 8000fe0:	e12b      	b.n	800123a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000fe8:	b2db      	uxtb	r3, r3
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d106      	bne.n	8000ffc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000ff6:	6878      	ldr	r0, [r7, #4]
 8000ff8:	f7ff fbb2 	bl	8000760 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	2224      	movs	r2, #36	; 0x24
 8001000:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	681a      	ldr	r2, [r3, #0]
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	f022 0201 	bic.w	r2, r2, #1
 8001012:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	681a      	ldr	r2, [r3, #0]
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001022:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	681a      	ldr	r2, [r3, #0]
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001032:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001034:	f001 fbd8 	bl	80027e8 <HAL_RCC_GetPCLK1Freq>
 8001038:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	685b      	ldr	r3, [r3, #4]
 800103e:	4a81      	ldr	r2, [pc, #516]	; (8001244 <HAL_I2C_Init+0x274>)
 8001040:	4293      	cmp	r3, r2
 8001042:	d807      	bhi.n	8001054 <HAL_I2C_Init+0x84>
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	4a80      	ldr	r2, [pc, #512]	; (8001248 <HAL_I2C_Init+0x278>)
 8001048:	4293      	cmp	r3, r2
 800104a:	bf94      	ite	ls
 800104c:	2301      	movls	r3, #1
 800104e:	2300      	movhi	r3, #0
 8001050:	b2db      	uxtb	r3, r3
 8001052:	e006      	b.n	8001062 <HAL_I2C_Init+0x92>
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	4a7d      	ldr	r2, [pc, #500]	; (800124c <HAL_I2C_Init+0x27c>)
 8001058:	4293      	cmp	r3, r2
 800105a:	bf94      	ite	ls
 800105c:	2301      	movls	r3, #1
 800105e:	2300      	movhi	r3, #0
 8001060:	b2db      	uxtb	r3, r3
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001066:	2301      	movs	r3, #1
 8001068:	e0e7      	b.n	800123a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	4a78      	ldr	r2, [pc, #480]	; (8001250 <HAL_I2C_Init+0x280>)
 800106e:	fba2 2303 	umull	r2, r3, r2, r3
 8001072:	0c9b      	lsrs	r3, r3, #18
 8001074:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	68ba      	ldr	r2, [r7, #8]
 8001086:	430a      	orrs	r2, r1
 8001088:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	6a1b      	ldr	r3, [r3, #32]
 8001090:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	4a6a      	ldr	r2, [pc, #424]	; (8001244 <HAL_I2C_Init+0x274>)
 800109a:	4293      	cmp	r3, r2
 800109c:	d802      	bhi.n	80010a4 <HAL_I2C_Init+0xd4>
 800109e:	68bb      	ldr	r3, [r7, #8]
 80010a0:	3301      	adds	r3, #1
 80010a2:	e009      	b.n	80010b8 <HAL_I2C_Init+0xe8>
 80010a4:	68bb      	ldr	r3, [r7, #8]
 80010a6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80010aa:	fb02 f303 	mul.w	r3, r2, r3
 80010ae:	4a69      	ldr	r2, [pc, #420]	; (8001254 <HAL_I2C_Init+0x284>)
 80010b0:	fba2 2303 	umull	r2, r3, r2, r3
 80010b4:	099b      	lsrs	r3, r3, #6
 80010b6:	3301      	adds	r3, #1
 80010b8:	687a      	ldr	r2, [r7, #4]
 80010ba:	6812      	ldr	r2, [r2, #0]
 80010bc:	430b      	orrs	r3, r1
 80010be:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	69db      	ldr	r3, [r3, #28]
 80010c6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80010ca:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	495c      	ldr	r1, [pc, #368]	; (8001244 <HAL_I2C_Init+0x274>)
 80010d4:	428b      	cmp	r3, r1
 80010d6:	d819      	bhi.n	800110c <HAL_I2C_Init+0x13c>
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	1e59      	subs	r1, r3, #1
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	005b      	lsls	r3, r3, #1
 80010e2:	fbb1 f3f3 	udiv	r3, r1, r3
 80010e6:	1c59      	adds	r1, r3, #1
 80010e8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80010ec:	400b      	ands	r3, r1
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d00a      	beq.n	8001108 <HAL_I2C_Init+0x138>
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	1e59      	subs	r1, r3, #1
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	005b      	lsls	r3, r3, #1
 80010fc:	fbb1 f3f3 	udiv	r3, r1, r3
 8001100:	3301      	adds	r3, #1
 8001102:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001106:	e051      	b.n	80011ac <HAL_I2C_Init+0x1dc>
 8001108:	2304      	movs	r3, #4
 800110a:	e04f      	b.n	80011ac <HAL_I2C_Init+0x1dc>
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	689b      	ldr	r3, [r3, #8]
 8001110:	2b00      	cmp	r3, #0
 8001112:	d111      	bne.n	8001138 <HAL_I2C_Init+0x168>
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	1e58      	subs	r0, r3, #1
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	6859      	ldr	r1, [r3, #4]
 800111c:	460b      	mov	r3, r1
 800111e:	005b      	lsls	r3, r3, #1
 8001120:	440b      	add	r3, r1
 8001122:	fbb0 f3f3 	udiv	r3, r0, r3
 8001126:	3301      	adds	r3, #1
 8001128:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800112c:	2b00      	cmp	r3, #0
 800112e:	bf0c      	ite	eq
 8001130:	2301      	moveq	r3, #1
 8001132:	2300      	movne	r3, #0
 8001134:	b2db      	uxtb	r3, r3
 8001136:	e012      	b.n	800115e <HAL_I2C_Init+0x18e>
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	1e58      	subs	r0, r3, #1
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	6859      	ldr	r1, [r3, #4]
 8001140:	460b      	mov	r3, r1
 8001142:	009b      	lsls	r3, r3, #2
 8001144:	440b      	add	r3, r1
 8001146:	0099      	lsls	r1, r3, #2
 8001148:	440b      	add	r3, r1
 800114a:	fbb0 f3f3 	udiv	r3, r0, r3
 800114e:	3301      	adds	r3, #1
 8001150:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001154:	2b00      	cmp	r3, #0
 8001156:	bf0c      	ite	eq
 8001158:	2301      	moveq	r3, #1
 800115a:	2300      	movne	r3, #0
 800115c:	b2db      	uxtb	r3, r3
 800115e:	2b00      	cmp	r3, #0
 8001160:	d001      	beq.n	8001166 <HAL_I2C_Init+0x196>
 8001162:	2301      	movs	r3, #1
 8001164:	e022      	b.n	80011ac <HAL_I2C_Init+0x1dc>
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	689b      	ldr	r3, [r3, #8]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d10e      	bne.n	800118c <HAL_I2C_Init+0x1bc>
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	1e58      	subs	r0, r3, #1
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	6859      	ldr	r1, [r3, #4]
 8001176:	460b      	mov	r3, r1
 8001178:	005b      	lsls	r3, r3, #1
 800117a:	440b      	add	r3, r1
 800117c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001180:	3301      	adds	r3, #1
 8001182:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001186:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800118a:	e00f      	b.n	80011ac <HAL_I2C_Init+0x1dc>
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	1e58      	subs	r0, r3, #1
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	6859      	ldr	r1, [r3, #4]
 8001194:	460b      	mov	r3, r1
 8001196:	009b      	lsls	r3, r3, #2
 8001198:	440b      	add	r3, r1
 800119a:	0099      	lsls	r1, r3, #2
 800119c:	440b      	add	r3, r1
 800119e:	fbb0 f3f3 	udiv	r3, r0, r3
 80011a2:	3301      	adds	r3, #1
 80011a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80011a8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80011ac:	6879      	ldr	r1, [r7, #4]
 80011ae:	6809      	ldr	r1, [r1, #0]
 80011b0:	4313      	orrs	r3, r2
 80011b2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	69da      	ldr	r2, [r3, #28]
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	6a1b      	ldr	r3, [r3, #32]
 80011c6:	431a      	orrs	r2, r3
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	430a      	orrs	r2, r1
 80011ce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	689b      	ldr	r3, [r3, #8]
 80011d6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80011da:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80011de:	687a      	ldr	r2, [r7, #4]
 80011e0:	6911      	ldr	r1, [r2, #16]
 80011e2:	687a      	ldr	r2, [r7, #4]
 80011e4:	68d2      	ldr	r2, [r2, #12]
 80011e6:	4311      	orrs	r1, r2
 80011e8:	687a      	ldr	r2, [r7, #4]
 80011ea:	6812      	ldr	r2, [r2, #0]
 80011ec:	430b      	orrs	r3, r1
 80011ee:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	68db      	ldr	r3, [r3, #12]
 80011f6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	695a      	ldr	r2, [r3, #20]
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	699b      	ldr	r3, [r3, #24]
 8001202:	431a      	orrs	r2, r3
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	430a      	orrs	r2, r1
 800120a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	681a      	ldr	r2, [r3, #0]
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f042 0201 	orr.w	r2, r2, #1
 800121a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	2200      	movs	r2, #0
 8001220:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	2220      	movs	r2, #32
 8001226:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	2200      	movs	r2, #0
 800122e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	2200      	movs	r2, #0
 8001234:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001238:	2300      	movs	r3, #0
}
 800123a:	4618      	mov	r0, r3
 800123c:	3710      	adds	r7, #16
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	000186a0 	.word	0x000186a0
 8001248:	001e847f 	.word	0x001e847f
 800124c:	003d08ff 	.word	0x003d08ff
 8001250:	431bde83 	.word	0x431bde83
 8001254:	10624dd3 	.word	0x10624dd3

08001258 <HAL_MMC_Init>:
            MMC_HandleTypeDef and create the associated handle.
  * @param  hmmc: Pointer to the MMC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MMC_Init(MMC_HandleTypeDef *hmmc)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b082      	sub	sp, #8
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  /* Check the MMC handle allocation */
  if(hmmc == NULL)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	2b00      	cmp	r3, #0
 8001264:	d101      	bne.n	800126a <HAL_MMC_Init+0x12>
  {
    return HAL_ERROR;
 8001266:	2301      	movs	r3, #1
 8001268:	e031      	b.n	80012ce <HAL_MMC_Init+0x76>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hmmc->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hmmc->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hmmc->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hmmc->Init.ClockDiv));

  if(hmmc->State == HAL_MMC_STATE_RESET)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001270:	b2db      	uxtb	r3, r3
 8001272:	2b00      	cmp	r3, #0
 8001274:	d105      	bne.n	8001282 <HAL_MMC_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hmmc->Lock = HAL_UNLOCKED;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	2200      	movs	r2, #0
 800127a:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hmmc->MspInitCallback(hmmc);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_MMC_MspInit(hmmc);
 800127c:	6878      	ldr	r0, [r7, #4]
 800127e:	f7ff fab7 	bl	80007f0 <HAL_MMC_MspInit>
#endif
  }

  hmmc->State = HAL_MMC_STATE_BUSY;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	2203      	movs	r2, #3
 8001286:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if(HAL_MMC_InitCard(hmmc) == HAL_ERROR)
 800128a:	6878      	ldr	r0, [r7, #4]
 800128c:	f000 f824 	bl	80012d8 <HAL_MMC_InitCard>
 8001290:	4603      	mov	r3, r0
 8001292:	2b01      	cmp	r3, #1
 8001294:	d101      	bne.n	800129a <HAL_MMC_Init+0x42>
  {
    return HAL_ERROR;
 8001296:	2301      	movs	r3, #1
 8001298:	e019      	b.n	80012ce <HAL_MMC_Init+0x76>
  }

  /* Initialize the error code */
  hmmc->ErrorCode = HAL_MMC_ERROR_NONE;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	2200      	movs	r2, #0
 800129e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the MMC operation */
  hmmc->Context = MMC_CONTEXT_NONE;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	2200      	movs	r2, #0
 80012a4:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the MMC state */
  hmmc->State = HAL_MMC_STATE_READY;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	2201      	movs	r2, #1
 80012aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Configure bus width */
  if (hmmc->Init.BusWide != SDIO_BUS_WIDE_1B)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	691b      	ldr	r3, [r3, #16]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d00a      	beq.n	80012cc <HAL_MMC_Init+0x74>
  {
    if (HAL_MMC_ConfigWideBusOperation(hmmc, hmmc->Init.BusWide) != HAL_OK)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	691b      	ldr	r3, [r3, #16]
 80012ba:	4619      	mov	r1, r3
 80012bc:	6878      	ldr	r0, [r7, #4]
 80012be:	f000 fb23 	bl	8001908 <HAL_MMC_ConfigWideBusOperation>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d001      	beq.n	80012cc <HAL_MMC_Init+0x74>
    {
      return HAL_ERROR;
 80012c8:	2301      	movs	r3, #1
 80012ca:	e000      	b.n	80012ce <HAL_MMC_Init+0x76>
    }
  }

  return HAL_OK;
 80012cc:	2300      	movs	r3, #0
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	3708      	adds	r7, #8
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
	...

080012d8 <HAL_MMC_InitCard>:
  * @note   This function initializes the MMC card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MMC_InitCard(MMC_HandleTypeDef *hmmc)
{
 80012d8:	b5b0      	push	{r4, r5, r7, lr}
 80012da:	b08e      	sub	sp, #56	; 0x38
 80012dc:	af04      	add	r7, sp, #16
 80012de:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  MMC_InitTypeDef Init;
  HAL_StatusTypeDef status;
  
  /* Default SDIO peripheral configuration for MMC card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 80012e0:	2300      	movs	r3, #0
 80012e2:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 80012e4:	2300      	movs	r3, #0
 80012e6:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80012e8:	2300      	movs	r3, #0
 80012ea:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 80012ec:	2300      	movs	r3, #0
 80012ee:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80012f0:	2300      	movs	r3, #0
 80012f2:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 80012f4:	2376      	movs	r3, #118	; 0x76
 80012f6:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hmmc->Instance, Init);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681d      	ldr	r5, [r3, #0]
 80012fc:	466c      	mov	r4, sp
 80012fe:	f107 0314 	add.w	r3, r7, #20
 8001302:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001306:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800130a:	f107 0308 	add.w	r3, r7, #8
 800130e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001310:	4628      	mov	r0, r5
 8001312:	f001 fa7d 	bl	8002810 <SDIO_Init>
 8001316:	4603      	mov	r3, r0
 8001318:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status == HAL_ERROR)
 800131c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001320:	2b01      	cmp	r3, #1
 8001322:	d101      	bne.n	8001328 <HAL_MMC_InitCard+0x50>
  {
    return HAL_ERROR;
 8001324:	2301      	movs	r3, #1
 8001326:	e058      	b.n	80013da <HAL_MMC_InitCard+0x102>
  }

  /* Disable SDIO Clock */
  __HAL_MMC_DISABLE(hmmc); 
 8001328:	4b2e      	ldr	r3, [pc, #184]	; (80013e4 <HAL_MMC_InitCard+0x10c>)
 800132a:	2200      	movs	r2, #0
 800132c:	601a      	str	r2, [r3, #0]
  
  /* Set Power State to ON */
  status = SDIO_PowerState_ON(hmmc->Instance);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	4618      	mov	r0, r3
 8001334:	f001 faa4 	bl	8002880 <SDIO_PowerState_ON>
 8001338:	4603      	mov	r3, r0
 800133a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status == HAL_ERROR)
 800133e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001342:	2b01      	cmp	r3, #1
 8001344:	d101      	bne.n	800134a <HAL_MMC_InitCard+0x72>
  {
    return HAL_ERROR;
 8001346:	2301      	movs	r3, #1
 8001348:	e047      	b.n	80013da <HAL_MMC_InitCard+0x102>
  }

  /* Enable MMC Clock */
  __HAL_MMC_ENABLE(hmmc);
 800134a:	4b26      	ldr	r3, [pc, #152]	; (80013e4 <HAL_MMC_InitCard+0x10c>)
 800134c:	2201      	movs	r2, #1
 800134e:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the MMC initialization  sequence */
  HAL_Delay(2);
 8001350:	2002      	movs	r0, #2
 8001352:	f7ff fbaf 	bl	8000ab4 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = MMC_PowerON(hmmc);
 8001356:	6878      	ldr	r0, [r7, #4]
 8001358:	f000 fc8c 	bl	8001c74 <MMC_PowerON>
 800135c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_MMC_ERROR_NONE)
 800135e:	6a3b      	ldr	r3, [r7, #32]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d00b      	beq.n	800137c <HAL_MMC_InitCard+0xa4>
  {
    hmmc->State = HAL_MMC_STATE_READY;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2201      	movs	r2, #1
 8001368:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hmmc->ErrorCode |= errorstate;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001370:	6a3b      	ldr	r3, [r7, #32]
 8001372:	431a      	orrs	r2, r3
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8001378:	2301      	movs	r3, #1
 800137a:	e02e      	b.n	80013da <HAL_MMC_InitCard+0x102>
  }

  /* Card initialization */
  errorstate = MMC_InitCard(hmmc);
 800137c:	6878      	ldr	r0, [r7, #4]
 800137e:	f000 fb75 	bl	8001a6c <MMC_InitCard>
 8001382:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_MMC_ERROR_NONE)
 8001384:	6a3b      	ldr	r3, [r7, #32]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d00b      	beq.n	80013a2 <HAL_MMC_InitCard+0xca>
  {
    hmmc->State = HAL_MMC_STATE_READY;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	2201      	movs	r2, #1
 800138e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hmmc->ErrorCode |= errorstate;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001396:	6a3b      	ldr	r3, [r7, #32]
 8001398:	431a      	orrs	r2, r3
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800139e:	2301      	movs	r3, #1
 80013a0:	e01b      	b.n	80013da <HAL_MMC_InitCard+0x102>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hmmc->Instance, MMC_BLOCKSIZE);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013aa:	4618      	mov	r0, r3
 80013ac:	f001 fafa 	bl	80029a4 <SDMMC_CmdBlockLength>
 80013b0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_MMC_ERROR_NONE)
 80013b2:	6a3b      	ldr	r3, [r7, #32]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d00f      	beq.n	80013d8 <HAL_MMC_InitCard+0x100>
  {
    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDIO_STATIC_FLAGS);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4a0a      	ldr	r2, [pc, #40]	; (80013e8 <HAL_MMC_InitCard+0x110>)
 80013be:	639a      	str	r2, [r3, #56]	; 0x38
    hmmc->ErrorCode |= errorstate;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80013c4:	6a3b      	ldr	r3, [r7, #32]
 80013c6:	431a      	orrs	r2, r3
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	639a      	str	r2, [r3, #56]	; 0x38
    hmmc->State = HAL_MMC_STATE_READY;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2201      	movs	r2, #1
 80013d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80013d4:	2301      	movs	r3, #1
 80013d6:	e000      	b.n	80013da <HAL_MMC_InitCard+0x102>
  }

  return HAL_OK;
 80013d8:	2300      	movs	r3, #0
}
 80013da:	4618      	mov	r0, r3
 80013dc:	3728      	adds	r7, #40	; 0x28
 80013de:	46bd      	mov	sp, r7
 80013e0:	bdb0      	pop	{r4, r5, r7, pc}
 80013e2:	bf00      	nop
 80013e4:	422580a0 	.word	0x422580a0
 80013e8:	004005ff 	.word	0x004005ff

080013ec <HAL_MMC_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_MMC_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MMC_GetCardCSD(MMC_HandleTypeDef *hmmc, HAL_MMC_CardCSDTypeDef *pCSD)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b084      	sub	sp, #16
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
 80013f4:	6039      	str	r1, [r7, #0]
  uint32_t block_nbr = 0;
 80013f6:	2300      	movs	r3, #0
 80013f8:	60fb      	str	r3, [r7, #12]

  pCSD->CSDStruct = (uint8_t)((hmmc->CSD[0] & 0xC0000000U) >> 30U);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013fe:	0f9b      	lsrs	r3, r3, #30
 8001400:	b2da      	uxtb	r2, r3
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hmmc->CSD[0] & 0x3C000000U) >> 26U);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800140a:	0e9b      	lsrs	r3, r3, #26
 800140c:	b2db      	uxtb	r3, r3
 800140e:	f003 030f 	and.w	r3, r3, #15
 8001412:	b2da      	uxtb	r2, r3
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hmmc->CSD[0] & 0x03000000U) >> 24U);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800141c:	0e1b      	lsrs	r3, r3, #24
 800141e:	b2db      	uxtb	r3, r3
 8001420:	f003 0303 	and.w	r3, r3, #3
 8001424:	b2da      	uxtb	r2, r3
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hmmc->CSD[0] & 0x00FF0000U) >> 16U);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800142e:	0c1b      	lsrs	r3, r3, #16
 8001430:	b2da      	uxtb	r2, r3
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hmmc->CSD[0] & 0x0000FF00U) >> 8U);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800143a:	0a1b      	lsrs	r3, r3, #8
 800143c:	b2da      	uxtb	r2, r3
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hmmc->CSD[0] & 0x000000FFU);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001446:	b2da      	uxtb	r2, r3
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hmmc->CSD[1] & 0xFFF00000U) >> 20U);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001450:	0d1b      	lsrs	r3, r3, #20
 8001452:	b29a      	uxth	r2, r3
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hmmc->CSD[1] & 0x000F0000U) >> 16U);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800145c:	0c1b      	lsrs	r3, r3, #16
 800145e:	b2db      	uxtb	r3, r3
 8001460:	f003 030f 	and.w	r3, r3, #15
 8001464:	b2da      	uxtb	r2, r3
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hmmc->CSD[1] & 0x00008000U) >> 15U);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800146e:	0bdb      	lsrs	r3, r3, #15
 8001470:	b2db      	uxtb	r3, r3
 8001472:	f003 0301 	and.w	r3, r3, #1
 8001476:	b2da      	uxtb	r2, r3
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hmmc->CSD[1] & 0x00004000U) >> 14U);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001480:	0b9b      	lsrs	r3, r3, #14
 8001482:	b2db      	uxtb	r3, r3
 8001484:	f003 0301 	and.w	r3, r3, #1
 8001488:	b2da      	uxtb	r2, r3
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hmmc->CSD[1] & 0x00002000U) >> 13U);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001492:	0b5b      	lsrs	r3, r3, #13
 8001494:	b2db      	uxtb	r3, r3
 8001496:	f003 0301 	and.w	r3, r3, #1
 800149a:	b2da      	uxtb	r2, r3
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hmmc->CSD[1] & 0x00001000U) >> 12U);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80014a4:	0b1b      	lsrs	r3, r3, #12
 80014a6:	b2db      	uxtb	r3, r3
 80014a8:	f003 0301 	and.w	r3, r3, #1
 80014ac:	b2da      	uxtb	r2, r3
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	2200      	movs	r2, #0
 80014b6:	735a      	strb	r2, [r3, #13]

  pCSD->DeviceSize = (((hmmc->CSD[1] & 0x000003FFU) << 2U) | ((hmmc->CSD[2] & 0xC0000000U) >> 30U));
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80014bc:	009a      	lsls	r2, r3, #2
 80014be:	f640 73fc 	movw	r3, #4092	; 0xffc
 80014c2:	4013      	ands	r3, r2
 80014c4:	687a      	ldr	r2, [r7, #4]
 80014c6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80014c8:	0f92      	lsrs	r2, r2, #30
 80014ca:	431a      	orrs	r2, r3
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	611a      	str	r2, [r3, #16]

  pCSD->MaxRdCurrentVDDMin = (uint8_t)((hmmc->CSD[2] & 0x38000000U) >> 27U);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80014d4:	0edb      	lsrs	r3, r3, #27
 80014d6:	b2db      	uxtb	r3, r3
 80014d8:	f003 0307 	and.w	r3, r3, #7
 80014dc:	b2da      	uxtb	r2, r3
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	751a      	strb	r2, [r3, #20]

  pCSD->MaxRdCurrentVDDMax = (uint8_t)((hmmc->CSD[2] & 0x07000000U) >> 24U);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80014e6:	0e1b      	lsrs	r3, r3, #24
 80014e8:	b2db      	uxtb	r3, r3
 80014ea:	f003 0307 	and.w	r3, r3, #7
 80014ee:	b2da      	uxtb	r2, r3
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	755a      	strb	r2, [r3, #21]

  pCSD->MaxWrCurrentVDDMin = (uint8_t)((hmmc->CSD[2] & 0x00E00000U) >> 21U);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80014f8:	0d5b      	lsrs	r3, r3, #21
 80014fa:	b2db      	uxtb	r3, r3
 80014fc:	f003 0307 	and.w	r3, r3, #7
 8001500:	b2da      	uxtb	r2, r3
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	759a      	strb	r2, [r3, #22]

  pCSD->MaxWrCurrentVDDMax = (uint8_t)((hmmc->CSD[2] & 0x001C0000U) >> 18U);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800150a:	0c9b      	lsrs	r3, r3, #18
 800150c:	b2db      	uxtb	r3, r3
 800150e:	f003 0307 	and.w	r3, r3, #7
 8001512:	b2da      	uxtb	r2, r3
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	75da      	strb	r2, [r3, #23]

  pCSD->DeviceSizeMul = (uint8_t)((hmmc->CSD[2] & 0x00038000U) >> 15U);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800151c:	0bdb      	lsrs	r3, r3, #15
 800151e:	b2db      	uxtb	r3, r3
 8001520:	f003 0307 	and.w	r3, r3, #7
 8001524:	b2da      	uxtb	r2, r3
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	761a      	strb	r2, [r3, #24]

  if(MMC_ReadExtCSD(hmmc, &block_nbr, 212, 0x0FFFFFFFU) != HAL_OK) /* Field SEC_COUNT [215:212] */
 800152a:	f107 010c 	add.w	r1, r7, #12
 800152e:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 8001532:	22d4      	movs	r2, #212	; 0xd4
 8001534:	6878      	ldr	r0, [r7, #4]
 8001536:	f000 fbed 	bl	8001d14 <MMC_ReadExtCSD>
 800153a:	4603      	mov	r3, r0
 800153c:	2b00      	cmp	r3, #0
 800153e:	d001      	beq.n	8001544 <HAL_MMC_GetCardCSD+0x158>
  {
    return HAL_ERROR;
 8001540:	2301      	movs	r3, #1
 8001542:	e0f0      	b.n	8001726 <HAL_MMC_GetCardCSD+0x33a>
  }

  if(hmmc->MmcCard.CardType == MMC_LOW_CAPACITY_CARD)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001548:	2b00      	cmp	r3, #0
 800154a:	d12a      	bne.n	80015a2 <HAL_MMC_GetCardCSD+0x1b6>
  {
    hmmc->MmcCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	691b      	ldr	r3, [r3, #16]
 8001550:	1c5a      	adds	r2, r3, #1
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	651a      	str	r2, [r3, #80]	; 0x50
    hmmc->MmcCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	7e1b      	ldrb	r3, [r3, #24]
 800155a:	b2db      	uxtb	r3, r3
 800155c:	f003 0307 	and.w	r3, r3, #7
 8001560:	3302      	adds	r3, #2
 8001562:	2201      	movs	r2, #1
 8001564:	fa02 f303 	lsl.w	r3, r2, r3
 8001568:	687a      	ldr	r2, [r7, #4]
 800156a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800156c:	fb03 f202 	mul.w	r2, r3, r2
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	651a      	str	r2, [r3, #80]	; 0x50
    hmmc->MmcCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	7a1b      	ldrb	r3, [r3, #8]
 8001578:	b2db      	uxtb	r3, r3
 800157a:	f003 030f 	and.w	r3, r3, #15
 800157e:	2201      	movs	r2, #1
 8001580:	409a      	lsls	r2, r3
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	655a      	str	r2, [r3, #84]	; 0x54
    hmmc->MmcCard.LogBlockNbr =  (hmmc->MmcCard.BlockNbr) * ((hmmc->MmcCard.BlockSize) / 512U);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800158a:	687a      	ldr	r2, [r7, #4]
 800158c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800158e:	0a52      	lsrs	r2, r2, #9
 8001590:	fb03 f202 	mul.w	r2, r3, r2
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	659a      	str	r2, [r3, #88]	; 0x58
    hmmc->MmcCard.LogBlockSize = 512U;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800159e:	65da      	str	r2, [r3, #92]	; 0x5c
 80015a0:	e023      	b.n	80015ea <HAL_MMC_GetCardCSD+0x1fe>
  }
  else if(hmmc->MmcCard.CardType == MMC_HIGH_CAPACITY_CARD)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015a6:	2b01      	cmp	r3, #1
 80015a8:	d10f      	bne.n	80015ca <HAL_MMC_GetCardCSD+0x1de>
  {
    hmmc->MmcCard.BlockNbr = block_nbr;
 80015aa:	68fa      	ldr	r2, [r7, #12]
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	651a      	str	r2, [r3, #80]	; 0x50
    hmmc->MmcCard.LogBlockNbr = hmmc->MmcCard.BlockNbr;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	659a      	str	r2, [r3, #88]	; 0x58
    hmmc->MmcCard.BlockSize = 512U;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015be:	655a      	str	r2, [r3, #84]	; 0x54
    hmmc->MmcCard.LogBlockSize = hmmc->MmcCard.BlockSize;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	65da      	str	r2, [r3, #92]	; 0x5c
 80015c8:	e00f      	b.n	80015ea <HAL_MMC_GetCardCSD+0x1fe>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDIO_STATIC_FLAGS);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4a58      	ldr	r2, [pc, #352]	; (8001730 <HAL_MMC_GetCardCSD+0x344>)
 80015d0:	639a      	str	r2, [r3, #56]	; 0x38
    hmmc->ErrorCode |= HAL_MMC_ERROR_UNSUPPORTED_FEATURE;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015d6:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	639a      	str	r2, [r3, #56]	; 0x38
    hmmc->State = HAL_MMC_STATE_READY;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	2201      	movs	r2, #1
 80015e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80015e6:	2301      	movs	r3, #1
 80015e8:	e09d      	b.n	8001726 <HAL_MMC_GetCardCSD+0x33a>
  }

  pCSD->EraseGrSize = (uint8_t)((hmmc->CSD[2] & 0x00004000U) >> 14U);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80015ee:	0b9b      	lsrs	r3, r3, #14
 80015f0:	b2db      	uxtb	r3, r3
 80015f2:	f003 0301 	and.w	r3, r3, #1
 80015f6:	b2da      	uxtb	r2, r3
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hmmc->CSD[2] & 0x00003F80U) >> 7U);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001600:	09db      	lsrs	r3, r3, #7
 8001602:	b2db      	uxtb	r3, r3
 8001604:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001608:	b2da      	uxtb	r2, r3
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hmmc->CSD[2] & 0x0000007FU);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001612:	b2db      	uxtb	r3, r3
 8001614:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001618:	b2da      	uxtb	r2, r3
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hmmc->CSD[3] & 0x80000000U) >> 31U);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001622:	0fdb      	lsrs	r3, r3, #31
 8001624:	b2da      	uxtb	r2, r3
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hmmc->CSD[3] & 0x60000000U) >> 29U);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800162e:	0f5b      	lsrs	r3, r3, #29
 8001630:	b2db      	uxtb	r3, r3
 8001632:	f003 0303 	and.w	r3, r3, #3
 8001636:	b2da      	uxtb	r2, r3
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hmmc->CSD[3] & 0x1C000000U) >> 26U);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001640:	0e9b      	lsrs	r3, r3, #26
 8001642:	b2db      	uxtb	r3, r3
 8001644:	f003 0307 	and.w	r3, r3, #7
 8001648:	b2da      	uxtb	r2, r3
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hmmc->CSD[3] & 0x03C00000U) >> 22U);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001652:	0d9b      	lsrs	r3, r3, #22
 8001654:	b2db      	uxtb	r3, r3
 8001656:	f003 030f 	and.w	r3, r3, #15
 800165a:	b2da      	uxtb	r2, r3
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hmmc->CSD[3] & 0x00200000U) >> 21U);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001664:	0d5b      	lsrs	r3, r3, #21
 8001666:	b2db      	uxtb	r3, r3
 8001668:	f003 0301 	and.w	r3, r3, #1
 800166c:	b2da      	uxtb	r2, r3
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	2200      	movs	r2, #0
 8001678:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hmmc->CSD[3] & 0x00010000U) >> 16U);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001680:	0c1b      	lsrs	r3, r3, #16
 8001682:	b2db      	uxtb	r3, r3
 8001684:	f003 0301 	and.w	r3, r3, #1
 8001688:	b2da      	uxtb	r2, r3
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hmmc->CSD[3] & 0x00008000U) >> 15U);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001694:	0bdb      	lsrs	r3, r3, #15
 8001696:	b2db      	uxtb	r3, r3
 8001698:	f003 0301 	and.w	r3, r3, #1
 800169c:	b2da      	uxtb	r2, r3
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hmmc->CSD[3] & 0x00004000U) >> 14U);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80016a8:	0b9b      	lsrs	r3, r3, #14
 80016aa:	b2db      	uxtb	r3, r3
 80016ac:	f003 0301 	and.w	r3, r3, #1
 80016b0:	b2da      	uxtb	r2, r3
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hmmc->CSD[3] & 0x00002000U) >> 13U);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80016bc:	0b5b      	lsrs	r3, r3, #13
 80016be:	b2db      	uxtb	r3, r3
 80016c0:	f003 0301 	and.w	r3, r3, #1
 80016c4:	b2da      	uxtb	r2, r3
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hmmc->CSD[3] & 0x00001000U) >> 12U);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80016d0:	0b1b      	lsrs	r3, r3, #12
 80016d2:	b2db      	uxtb	r3, r3
 80016d4:	f003 0301 	and.w	r3, r3, #1
 80016d8:	b2da      	uxtb	r2, r3
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hmmc->CSD[3] & 0x00000C00U) >> 10U);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80016e4:	0a9b      	lsrs	r3, r3, #10
 80016e6:	b2db      	uxtb	r3, r3
 80016e8:	f003 0303 	and.w	r3, r3, #3
 80016ec:	b2da      	uxtb	r2, r3
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hmmc->CSD[3] & 0x00000300U) >> 8U);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80016f8:	0a1b      	lsrs	r3, r3, #8
 80016fa:	b2db      	uxtb	r3, r3
 80016fc:	f003 0303 	and.w	r3, r3, #3
 8001700:	b2da      	uxtb	r2, r3
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hmmc->CSD[3] & 0x000000FEU) >> 1U);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800170c:	085b      	lsrs	r3, r3, #1
 800170e:	b2db      	uxtb	r3, r3
 8001710:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001714:	b2da      	uxtb	r2, r3
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	2201      	movs	r2, #1
 8001720:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8001724:	2300      	movs	r3, #0
}
 8001726:	4618      	mov	r0, r3
 8001728:	3710      	adds	r7, #16
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	004005ff 	.word	0x004005ff

08001734 <HAL_MMC_GetCardExtCSD>:
  *         Extended CSD register parameters
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MMC_GetCardExtCSD(MMC_HandleTypeDef *hmmc, uint32_t *pExtCSD, uint32_t Timeout)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b08e      	sub	sp, #56	; 0x38
 8001738:	af00      	add	r7, sp, #0
 800173a:	60f8      	str	r0, [r7, #12]
 800173c:	60b9      	str	r1, [r7, #8]
 800173e:	607a      	str	r2, [r7, #4]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8001740:	f7ff f9ac 	bl	8000a9c <HAL_GetTick>
 8001744:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t count;
  uint32_t *tmp_buf;

  if(NULL == pExtCSD)
 8001746:	68bb      	ldr	r3, [r7, #8]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d107      	bne.n	800175c <HAL_MMC_GetCardExtCSD+0x28>
  {
    hmmc->ErrorCode |= HAL_MMC_ERROR_PARAM;
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001750:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8001758:	2301      	movs	r3, #1
 800175a:	e0cf      	b.n	80018fc <HAL_MMC_GetCardExtCSD+0x1c8>
  }

  if(hmmc->State == HAL_MMC_STATE_READY)
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001762:	b2db      	uxtb	r3, r3
 8001764:	2b01      	cmp	r3, #1
 8001766:	f040 80c8 	bne.w	80018fa <HAL_MMC_GetCardExtCSD+0x1c6>
  {
    hmmc->ErrorCode = HAL_MMC_ERROR_NONE;
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	2200      	movs	r2, #0
 800176e:	639a      	str	r2, [r3, #56]	; 0x38

    hmmc->State = HAL_MMC_STATE_BUSY;
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	2203      	movs	r2, #3
 8001774:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hmmc->Instance->DCTRL = 0;
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	2200      	movs	r2, #0
 800177e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Initiaize the destination pointer */
    tmp_buf = pExtCSD;
 8001780:	68bb      	ldr	r3, [r7, #8]
 8001782:	633b      	str	r3, [r7, #48]	; 0x30

    /* Configure the MMC DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8001784:	f04f 33ff 	mov.w	r3, #4294967295
 8001788:	613b      	str	r3, [r7, #16]
    config.DataLength    = 512;
 800178a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800178e:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8001790:	2390      	movs	r3, #144	; 0x90
 8001792:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8001794:	2302      	movs	r3, #2
 8001796:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8001798:	2300      	movs	r3, #0
 800179a:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDIO_DPSM_ENABLE;
 800179c:	2301      	movs	r3, #1
 800179e:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDIO_ConfigData(hmmc->Instance, &config);
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f107 0210 	add.w	r2, r7, #16
 80017a8:	4611      	mov	r1, r2
 80017aa:	4618      	mov	r0, r3
 80017ac:	f001 f8ce 	bl	800294c <SDIO_ConfigData>

    /* Send ExtCSD Read command to Card */
    errorstate = SDMMC_CmdSendEXTCSD(hmmc->Instance, 0);
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	2100      	movs	r1, #0
 80017b6:	4618      	mov	r0, r3
 80017b8:	f001 fa1b 	bl	8002bf2 <SDMMC_CmdSendEXTCSD>
 80017bc:	62b8      	str	r0, [r7, #40]	; 0x28
    if(errorstate != HAL_MMC_ERROR_NONE)
 80017be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d045      	beq.n	8001850 <HAL_MMC_GetCardExtCSD+0x11c>
    {
      /* Clear all the static flags */
      __HAL_MMC_CLEAR_FLAG(hmmc, SDIO_STATIC_FLAGS);
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a4e      	ldr	r2, [pc, #312]	; (8001904 <HAL_MMC_GetCardExtCSD+0x1d0>)
 80017ca:	639a      	str	r2, [r3, #56]	; 0x38
      hmmc->ErrorCode |= errorstate;
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80017d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017d2:	431a      	orrs	r2, r3
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	639a      	str	r2, [r3, #56]	; 0x38
      hmmc->State = HAL_MMC_STATE_READY;
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	2201      	movs	r2, #1
 80017dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80017e0:	2301      	movs	r3, #1
 80017e2:	e08b      	b.n	80018fc <HAL_MMC_GetCardExtCSD+0x1c8>
    }

    /* Poll on SDMMC flags */
    while(!__HAL_MMC_GET_FLAG(hmmc, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
    {
      if(__HAL_MMC_GET_FLAG(hmmc, SDIO_FLAG_RXFIFOHF))
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017ea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d013      	beq.n	800181a <HAL_MMC_GetCardExtCSD+0xe6>
      {
        /* Read data from SDMMC Rx FIFO */
        for(count = 0U; count < 8U; count++)
 80017f2:	2300      	movs	r3, #0
 80017f4:	637b      	str	r3, [r7, #52]	; 0x34
 80017f6:	e00d      	b.n	8001814 <HAL_MMC_GetCardExtCSD+0xe0>
        {
          *tmp_buf = SDIO_ReadFIFO(hmmc->Instance);
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4618      	mov	r0, r3
 80017fe:	f001 f832 	bl	8002866 <SDIO_ReadFIFO>
 8001802:	4602      	mov	r2, r0
 8001804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001806:	601a      	str	r2, [r3, #0]
          tmp_buf++;
 8001808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800180a:	3304      	adds	r3, #4
 800180c:	633b      	str	r3, [r7, #48]	; 0x30
        for(count = 0U; count < 8U; count++)
 800180e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001810:	3301      	adds	r3, #1
 8001812:	637b      	str	r3, [r7, #52]	; 0x34
 8001814:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001816:	2b07      	cmp	r3, #7
 8001818:	d9ee      	bls.n	80017f8 <HAL_MMC_GetCardExtCSD+0xc4>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800181a:	f7ff f93f 	bl	8000a9c <HAL_GetTick>
 800181e:	4602      	mov	r2, r0
 8001820:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001822:	1ad3      	subs	r3, r2, r3
 8001824:	687a      	ldr	r2, [r7, #4]
 8001826:	429a      	cmp	r2, r3
 8001828:	d902      	bls.n	8001830 <HAL_MMC_GetCardExtCSD+0xfc>
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d10f      	bne.n	8001850 <HAL_MMC_GetCardExtCSD+0x11c>
      {
        /* Clear all the static flags */
        __HAL_MMC_CLEAR_FLAG(hmmc, SDIO_STATIC_FLAGS);
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a33      	ldr	r2, [pc, #204]	; (8001904 <HAL_MMC_GetCardExtCSD+0x1d0>)
 8001836:	639a      	str	r2, [r3, #56]	; 0x38
        hmmc->ErrorCode |= HAL_MMC_ERROR_TIMEOUT;
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800183c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	639a      	str	r2, [r3, #56]	; 0x38
        hmmc->State= HAL_MMC_STATE_READY;
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	2201      	movs	r2, #1
 8001848:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_TIMEOUT;
 800184c:	2303      	movs	r3, #3
 800184e:	e055      	b.n	80018fc <HAL_MMC_GetCardExtCSD+0x1c8>
    while(!__HAL_MMC_GET_FLAG(hmmc, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001856:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800185a:	2b00      	cmp	r3, #0
 800185c:	d0c2      	beq.n	80017e4 <HAL_MMC_GetCardExtCSD+0xb0>
      }
    }

    /* Get error state */
    if(__HAL_MMC_GET_FLAG(hmmc, SDIO_FLAG_DTIMEOUT))
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001864:	f003 0308 	and.w	r3, r3, #8
 8001868:	2b00      	cmp	r3, #0
 800186a:	d00f      	beq.n	800188c <HAL_MMC_GetCardExtCSD+0x158>
    {
      /* Clear all the static flags */
      __HAL_MMC_CLEAR_FLAG(hmmc, SDIO_STATIC_FLAGS);
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a24      	ldr	r2, [pc, #144]	; (8001904 <HAL_MMC_GetCardExtCSD+0x1d0>)
 8001872:	639a      	str	r2, [r3, #56]	; 0x38
      hmmc->ErrorCode |= HAL_MMC_ERROR_DATA_TIMEOUT;
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001878:	f043 0208 	orr.w	r2, r3, #8
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	639a      	str	r2, [r3, #56]	; 0x38
      hmmc->State = HAL_MMC_STATE_READY;
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	2201      	movs	r2, #1
 8001884:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8001888:	2301      	movs	r3, #1
 800188a:	e037      	b.n	80018fc <HAL_MMC_GetCardExtCSD+0x1c8>
    }
    else if(__HAL_MMC_GET_FLAG(hmmc, SDIO_FLAG_DCRCFAIL))
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001892:	f003 0302 	and.w	r3, r3, #2
 8001896:	2b00      	cmp	r3, #0
 8001898:	d00f      	beq.n	80018ba <HAL_MMC_GetCardExtCSD+0x186>
    {
      /* Clear all the static flags */
      __HAL_MMC_CLEAR_FLAG(hmmc, SDIO_STATIC_FLAGS);
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4a19      	ldr	r2, [pc, #100]	; (8001904 <HAL_MMC_GetCardExtCSD+0x1d0>)
 80018a0:	639a      	str	r2, [r3, #56]	; 0x38
      hmmc->ErrorCode |= HAL_MMC_ERROR_DATA_CRC_FAIL;
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018a6:	f043 0202 	orr.w	r2, r3, #2
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	639a      	str	r2, [r3, #56]	; 0x38
      hmmc->State = HAL_MMC_STATE_READY;
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	2201      	movs	r2, #1
 80018b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80018b6:	2301      	movs	r3, #1
 80018b8:	e020      	b.n	80018fc <HAL_MMC_GetCardExtCSD+0x1c8>
    }
    else if(__HAL_MMC_GET_FLAG(hmmc, SDIO_FLAG_RXOVERR))
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018c0:	f003 0320 	and.w	r3, r3, #32
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d00f      	beq.n	80018e8 <HAL_MMC_GetCardExtCSD+0x1b4>
    {
      /* Clear all the static flags */
      __HAL_MMC_CLEAR_FLAG(hmmc, SDIO_STATIC_FLAGS);
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a0d      	ldr	r2, [pc, #52]	; (8001904 <HAL_MMC_GetCardExtCSD+0x1d0>)
 80018ce:	639a      	str	r2, [r3, #56]	; 0x38
      hmmc->ErrorCode |= HAL_MMC_ERROR_RX_OVERRUN;
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018d4:	f043 0220 	orr.w	r2, r3, #32
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	639a      	str	r2, [r3, #56]	; 0x38
      hmmc->State = HAL_MMC_STATE_READY;
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	2201      	movs	r2, #1
 80018e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80018e4:	2301      	movs	r3, #1
 80018e6:	e009      	b.n	80018fc <HAL_MMC_GetCardExtCSD+0x1c8>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDIO_STATIC_DATA_FLAGS);
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f240 523a 	movw	r2, #1338	; 0x53a
 80018f0:	639a      	str	r2, [r3, #56]	; 0x38
    hmmc->State = HAL_MMC_STATE_READY;
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	2201      	movs	r2, #1
 80018f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 80018fa:	2300      	movs	r3, #0
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	3738      	adds	r7, #56	; 0x38
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}
 8001904:	004005ff 	.word	0x004005ff

08001908 <HAL_MMC_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MMC_ConfigWideBusOperation(MMC_HandleTypeDef *hmmc, uint32_t WideMode)
{
 8001908:	b5b0      	push	{r4, r5, r7, lr}
 800190a:	b090      	sub	sp, #64	; 0x40
 800190c:	af04      	add	r7, sp, #16
 800190e:	6078      	str	r0, [r7, #4]
 8001910:	6039      	str	r1, [r7, #0]
  uint32_t count;
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t response = 0U;
 8001912:	2300      	movs	r3, #0
 8001914:	627b      	str	r3, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hmmc->State = HAL_MMC_STATE_BUSY;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2203      	movs	r2, #3
 800191a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  errorstate = MMC_PwrClassUpdate(hmmc, WideMode);
 800191e:	6839      	ldr	r1, [r7, #0]
 8001920:	6878      	ldr	r0, [r7, #4]
 8001922:	f000 faa5 	bl	8001e70 <MMC_PwrClassUpdate>
 8001926:	62b8      	str	r0, [r7, #40]	; 0x28

  if(errorstate == HAL_MMC_ERROR_NONE)
 8001928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800192a:	2b00      	cmp	r3, #0
 800192c:	d17d      	bne.n	8001a2a <HAL_MMC_ConfigWideBusOperation+0x122>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001934:	d107      	bne.n	8001946 <HAL_MMC_ConfigWideBusOperation+0x3e>
    {
      errorstate = SDMMC_CmdSwitch(hmmc->Instance, 0x03B70200U);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4948      	ldr	r1, [pc, #288]	; (8001a5c <HAL_MMC_ConfigWideBusOperation+0x154>)
 800193c:	4618      	mov	r0, r3
 800193e:	f001 f936 	bl	8002bae <SDMMC_CmdSwitch>
 8001942:	62b8      	str	r0, [r7, #40]	; 0x28
 8001944:	e019      	b.n	800197a <HAL_MMC_ConfigWideBusOperation+0x72>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800194c:	d107      	bne.n	800195e <HAL_MMC_ConfigWideBusOperation+0x56>
    {
      errorstate = SDMMC_CmdSwitch(hmmc->Instance, 0x03B70100U);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4943      	ldr	r1, [pc, #268]	; (8001a60 <HAL_MMC_ConfigWideBusOperation+0x158>)
 8001954:	4618      	mov	r0, r3
 8001956:	f001 f92a 	bl	8002bae <SDMMC_CmdSwitch>
 800195a:	62b8      	str	r0, [r7, #40]	; 0x28
 800195c:	e00d      	b.n	800197a <HAL_MMC_ConfigWideBusOperation+0x72>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d107      	bne.n	8001974 <HAL_MMC_ConfigWideBusOperation+0x6c>
    {
      errorstate = SDMMC_CmdSwitch(hmmc->Instance, 0x03B70000U);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	493e      	ldr	r1, [pc, #248]	; (8001a64 <HAL_MMC_ConfigWideBusOperation+0x15c>)
 800196a:	4618      	mov	r0, r3
 800196c:	f001 f91f 	bl	8002bae <SDMMC_CmdSwitch>
 8001970:	62b8      	str	r0, [r7, #40]	; 0x28
 8001972:	e002      	b.n	800197a <HAL_MMC_ConfigWideBusOperation+0x72>
    }
    else
    {
      /* WideMode is not a valid argument*/
      errorstate = HAL_MMC_ERROR_PARAM;
 8001974:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001978:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Check for switch error and violation of the trial number of sending CMD 13 */
    if(errorstate == HAL_MMC_ERROR_NONE)
 800197a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800197c:	2b00      	cmp	r3, #0
 800197e:	d154      	bne.n	8001a2a <HAL_MMC_ConfigWideBusOperation+0x122>
    {
      /* While card is not ready for data and trial number for sending CMD13 is not exceeded */
      count = SDMMC_MAX_TRIAL;
 8001980:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001984:	62fb      	str	r3, [r7, #44]	; 0x2c
      do
      {
        errorstate = SDMMC_CmdSendStatus(hmmc->Instance, (uint32_t)(((uint32_t)hmmc->MmcCard.RelCardAdd) << 16U));
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681a      	ldr	r2, [r3, #0]
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800198e:	041b      	lsls	r3, r3, #16
 8001990:	4619      	mov	r1, r3
 8001992:	4610      	mov	r0, r2
 8001994:	f001 f8ca 	bl	8002b2c <SDMMC_CmdSendStatus>
 8001998:	62b8      	str	r0, [r7, #40]	; 0x28
        if(errorstate != HAL_MMC_ERROR_NONE)
 800199a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800199c:	2b00      	cmp	r3, #0
 800199e:	d112      	bne.n	80019c6 <HAL_MMC_ConfigWideBusOperation+0xbe>
        {
          break;
        }
        
        /* Get command response */
        response = SDIO_GetResponse(hmmc->Instance, SDIO_RESP1);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	2100      	movs	r1, #0
 80019a6:	4618      	mov	r0, r3
 80019a8:	f000 ffbd 	bl	8002926 <SDIO_GetResponse>
 80019ac:	6278      	str	r0, [r7, #36]	; 0x24
        count--;
 80019ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019b0:	3b01      	subs	r3, #1
 80019b2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }while(((response & 0x100U) == 0U) && (count != 0U));
 80019b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d104      	bne.n	80019c8 <HAL_MMC_ConfigWideBusOperation+0xc0>
 80019be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d1e0      	bne.n	8001986 <HAL_MMC_ConfigWideBusOperation+0x7e>
 80019c4:	e000      	b.n	80019c8 <HAL_MMC_ConfigWideBusOperation+0xc0>
          break;
 80019c6:	bf00      	nop

      /* Check the status after the switch command execution */
      if ((count != 0U) && (errorstate == HAL_MMC_ERROR_NONE))
 80019c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d027      	beq.n	8001a1e <HAL_MMC_ConfigWideBusOperation+0x116>
 80019ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d124      	bne.n	8001a1e <HAL_MMC_ConfigWideBusOperation+0x116>
      {
        /* Check the bit SWITCH_ERROR of the device status */
        if ((response & 0x80U) != 0U)
 80019d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d003      	beq.n	80019e6 <HAL_MMC_ConfigWideBusOperation+0xde>
        {
          errorstate = SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80019de:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80019e2:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((response & 0x80U) != 0U)
 80019e4:	e021      	b.n	8001a2a <HAL_MMC_ConfigWideBusOperation+0x122>
        }
        else
        {
          /* Configure the SDIO peripheral */
          Init = hmmc->Init;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	f107 040c 	add.w	r4, r7, #12
 80019ec:	1d1d      	adds	r5, r3, #4
 80019ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80019f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80019f2:	e895 0003 	ldmia.w	r5, {r0, r1}
 80019f6:	e884 0003 	stmia.w	r4, {r0, r1}
          Init.BusWide = WideMode;
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	61bb      	str	r3, [r7, #24]
          (void)SDIO_Init(hmmc->Instance, Init);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681d      	ldr	r5, [r3, #0]
 8001a02:	466c      	mov	r4, sp
 8001a04:	f107 0318 	add.w	r3, r7, #24
 8001a08:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001a0c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001a10:	f107 030c 	add.w	r3, r7, #12
 8001a14:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a16:	4628      	mov	r0, r5
 8001a18:	f000 fefa 	bl	8002810 <SDIO_Init>
        if ((response & 0x80U) != 0U)
 8001a1c:	e005      	b.n	8001a2a <HAL_MMC_ConfigWideBusOperation+0x122>
        }
      }
      else if (count == 0U)
 8001a1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d102      	bne.n	8001a2a <HAL_MMC_ConfigWideBusOperation+0x122>
      {
        errorstate = SDMMC_ERROR_TIMEOUT;
 8001a24:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001a28:	62bb      	str	r3, [r7, #40]	; 0x28
      }
    }
  }

  /* Change State */
  hmmc->State = HAL_MMC_STATE_READY;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2201      	movs	r2, #1
 8001a2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(errorstate != HAL_MMC_ERROR_NONE)
 8001a32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d00b      	beq.n	8001a50 <HAL_MMC_ConfigWideBusOperation+0x148>
  {
    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a0a      	ldr	r2, [pc, #40]	; (8001a68 <HAL_MMC_ConfigWideBusOperation+0x160>)
 8001a3e:	639a      	str	r2, [r3, #56]	; 0x38
    hmmc->ErrorCode |= errorstate;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001a44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a46:	431a      	orrs	r2, r3
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	e000      	b.n	8001a52 <HAL_MMC_ConfigWideBusOperation+0x14a>
  }

  return HAL_OK;
 8001a50:	2300      	movs	r3, #0
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	3730      	adds	r7, #48	; 0x30
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bdb0      	pop	{r4, r5, r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	03b70200 	.word	0x03b70200
 8001a60:	03b70100 	.word	0x03b70100
 8001a64:	03b70000 	.word	0x03b70000
 8001a68:	004005ff 	.word	0x004005ff

08001a6c <MMC_InitCard>:
  * @brief  Initializes the mmc card.
  * @param  hmmc: Pointer to MMC handle
  * @retval MMC Card error state
  */
static uint32_t MMC_InitCard(MMC_HandleTypeDef *hmmc)
{
 8001a6c:	b5b0      	push	{r4, r5, r7, lr}
 8001a6e:	b09a      	sub	sp, #104	; 0x68
 8001a70:	af04      	add	r7, sp, #16
 8001a72:	6078      	str	r0, [r7, #4]
  HAL_MMC_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t mmc_rca = 2U;
 8001a74:	2302      	movs	r3, #2
 8001a76:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  MMC_InitTypeDef Init;

  /* Check the power State */
  if(SDIO_GetPowerState(hmmc->Instance) == 0U)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f000 ff0c 	bl	800289c <SDIO_GetPowerState>
 8001a84:	4603      	mov	r3, r0
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d102      	bne.n	8001a90 <MMC_InitCard+0x24>
  {
    /* Power off */
    return HAL_MMC_ERROR_REQUEST_NOT_APPLICABLE;
 8001a8a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001a8e:	e0ec      	b.n	8001c6a <MMC_InitCard+0x1fe>
  }

  /* Send CMD2 ALL_SEND_CID */
  errorstate = SDMMC_CmdSendCID(hmmc->Instance);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4618      	mov	r0, r3
 8001a96:	f000 ffe8 	bl	8002a6a <SDMMC_CmdSendCID>
 8001a9a:	6538      	str	r0, [r7, #80]	; 0x50
  if(errorstate != HAL_MMC_ERROR_NONE)
 8001a9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d001      	beq.n	8001aa6 <MMC_InitCard+0x3a>
  {
    return errorstate;
 8001aa2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001aa4:	e0e1      	b.n	8001c6a <MMC_InitCard+0x1fe>
  }
  else
  {
    /* Get Card identification number data */
    hmmc->CID[0U] = SDIO_GetResponse(hmmc->Instance, SDIO_RESP1);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	2100      	movs	r1, #0
 8001aac:	4618      	mov	r0, r3
 8001aae:	f000 ff3a 	bl	8002926 <SDIO_GetResponse>
 8001ab2:	4602      	mov	r2, r0
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	671a      	str	r2, [r3, #112]	; 0x70
    hmmc->CID[1U] = SDIO_GetResponse(hmmc->Instance, SDIO_RESP2);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	2104      	movs	r1, #4
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f000 ff31 	bl	8002926 <SDIO_GetResponse>
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	675a      	str	r2, [r3, #116]	; 0x74
    hmmc->CID[2U] = SDIO_GetResponse(hmmc->Instance, SDIO_RESP3);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	2108      	movs	r1, #8
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f000 ff28 	bl	8002926 <SDIO_GetResponse>
 8001ad6:	4602      	mov	r2, r0
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	679a      	str	r2, [r3, #120]	; 0x78
    hmmc->CID[3U] = SDIO_GetResponse(hmmc->Instance, SDIO_RESP4);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	210c      	movs	r1, #12
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f000 ff1f 	bl	8002926 <SDIO_GetResponse>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	67da      	str	r2, [r3, #124]	; 0x7c
  }

  /* Send CMD3 SET_REL_ADDR with RCA = 2 (should be greater than 1) */
  /* MMC Card publishes its RCA. */
  errorstate = SDMMC_CmdSetRelAddMmc(hmmc->Instance, mmc_rca);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f8b7 2056 	ldrh.w	r2, [r7, #86]	; 0x56
 8001af6:	4611      	mov	r1, r2
 8001af8:	4618      	mov	r0, r3
 8001afa:	f000 fff3 	bl	8002ae4 <SDMMC_CmdSetRelAddMmc>
 8001afe:	6538      	str	r0, [r7, #80]	; 0x50
  if(errorstate != HAL_MMC_ERROR_NONE)
 8001b00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d001      	beq.n	8001b0a <MMC_InitCard+0x9e>
  {
    return errorstate;
 8001b06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001b08:	e0af      	b.n	8001c6a <MMC_InitCard+0x1fe>
  }

  /* Get the MMC card RCA */
  hmmc->MmcCard.RelCardAdd = mmc_rca;
 8001b0a:	f8b7 2056 	ldrh.w	r2, [r7, #86]	; 0x56
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Send CMD9 SEND_CSD with argument as card's RCA */
  errorstate = SDMMC_CmdSendCSD(hmmc->Instance, (uint32_t)(hmmc->MmcCard.RelCardAdd << 16U));
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681a      	ldr	r2, [r3, #0]
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b1a:	041b      	lsls	r3, r3, #16
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	4610      	mov	r0, r2
 8001b20:	f000 ffc1 	bl	8002aa6 <SDMMC_CmdSendCSD>
 8001b24:	6538      	str	r0, [r7, #80]	; 0x50
  if(errorstate != HAL_MMC_ERROR_NONE)
 8001b26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d001      	beq.n	8001b30 <MMC_InitCard+0xc4>
  {
    return errorstate;
 8001b2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001b2e:	e09c      	b.n	8001c6a <MMC_InitCard+0x1fe>
  }
  else
  {
    /* Get Card Specific Data */
    hmmc->CSD[0U] = SDIO_GetResponse(hmmc->Instance, SDIO_RESP1);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	2100      	movs	r1, #0
 8001b36:	4618      	mov	r0, r3
 8001b38:	f000 fef5 	bl	8002926 <SDIO_GetResponse>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	661a      	str	r2, [r3, #96]	; 0x60
    hmmc->CSD[1U] = SDIO_GetResponse(hmmc->Instance, SDIO_RESP2);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	2104      	movs	r1, #4
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f000 feec 	bl	8002926 <SDIO_GetResponse>
 8001b4e:	4602      	mov	r2, r0
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	665a      	str	r2, [r3, #100]	; 0x64
    hmmc->CSD[2U] = SDIO_GetResponse(hmmc->Instance, SDIO_RESP3);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	2108      	movs	r1, #8
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f000 fee3 	bl	8002926 <SDIO_GetResponse>
 8001b60:	4602      	mov	r2, r0
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	669a      	str	r2, [r3, #104]	; 0x68
    hmmc->CSD[3U] = SDIO_GetResponse(hmmc->Instance, SDIO_RESP4);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	210c      	movs	r1, #12
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f000 feda 	bl	8002926 <SDIO_GetResponse>
 8001b72:	4602      	mov	r2, r0
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	66da      	str	r2, [r3, #108]	; 0x6c
  }

  /* Get the Card Class */
  hmmc->MmcCard.Class = (SDIO_GetResponse(hmmc->Instance, SDIO_RESP2) >> 20U);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	2104      	movs	r1, #4
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f000 fed1 	bl	8002926 <SDIO_GetResponse>
 8001b84:	4603      	mov	r3, r0
 8001b86:	0d1a      	lsrs	r2, r3, #20
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	649a      	str	r2, [r3, #72]	; 0x48

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hmmc->Instance, (uint32_t)(((uint32_t)hmmc->MmcCard.RelCardAdd) << 16U));
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6819      	ldr	r1, [r3, #0]
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b94:	041b      	lsls	r3, r3, #16
 8001b96:	2200      	movs	r2, #0
 8001b98:	461c      	mov	r4, r3
 8001b9a:	4615      	mov	r5, r2
 8001b9c:	4622      	mov	r2, r4
 8001b9e:	462b      	mov	r3, r5
 8001ba0:	4608      	mov	r0, r1
 8001ba2:	f000 ff21 	bl	80029e8 <SDMMC_CmdSelDesel>
 8001ba6:	6538      	str	r0, [r7, #80]	; 0x50
  if(errorstate != HAL_MMC_ERROR_NONE)
 8001ba8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d001      	beq.n	8001bb2 <MMC_InitCard+0x146>
  {
    return errorstate;
 8001bae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001bb0:	e05b      	b.n	8001c6a <MMC_InitCard+0x1fe>
  }

  /* Get CSD parameters */
  if (HAL_MMC_GetCardCSD(hmmc, &CSD) != HAL_OK)
 8001bb2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	6878      	ldr	r0, [r7, #4]
 8001bba:	f7ff fc17 	bl	80013ec <HAL_MMC_GetCardCSD>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d002      	beq.n	8001bca <MMC_InitCard+0x15e>
  {
    return hmmc->ErrorCode;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bc8:	e04f      	b.n	8001c6a <MMC_InitCard+0x1fe>
  }

  /* While card is not ready for data and trial number for sending CMD13 is not exceeded */
  errorstate = SDMMC_CmdSendStatus(hmmc->Instance, (uint32_t)(((uint32_t)hmmc->MmcCard.RelCardAdd) << 16U));
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681a      	ldr	r2, [r3, #0]
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bd2:	041b      	lsls	r3, r3, #16
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	4610      	mov	r0, r2
 8001bd8:	f000 ffa8 	bl	8002b2c <SDMMC_CmdSendStatus>
 8001bdc:	6538      	str	r0, [r7, #80]	; 0x50
  if(errorstate != HAL_MMC_ERROR_NONE)
 8001bde:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d005      	beq.n	8001bf0 <MMC_InitCard+0x184>
  {
    hmmc->ErrorCode |= errorstate;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001be8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001bea:	431a      	orrs	r2, r3
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  /* Get Extended CSD parameters */
  if (HAL_MMC_GetCardExtCSD(hmmc, hmmc->Ext_CSD, SDMMC_DATATIMEOUT) != HAL_OK)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	3380      	adds	r3, #128	; 0x80
 8001bf4:	f04f 32ff 	mov.w	r2, #4294967295
 8001bf8:	4619      	mov	r1, r3
 8001bfa:	6878      	ldr	r0, [r7, #4]
 8001bfc:	f7ff fd9a 	bl	8001734 <HAL_MMC_GetCardExtCSD>
 8001c00:	4603      	mov	r3, r0
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d002      	beq.n	8001c0c <MMC_InitCard+0x1a0>
  {
    return hmmc->ErrorCode;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c0a:	e02e      	b.n	8001c6a <MMC_InitCard+0x1fe>
  }

  /* While card is not ready for data and trial number for sending CMD13 is not exceeded */
  errorstate = SDMMC_CmdSendStatus(hmmc->Instance, (uint32_t)(((uint32_t)hmmc->MmcCard.RelCardAdd) << 16U));
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681a      	ldr	r2, [r3, #0]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c14:	041b      	lsls	r3, r3, #16
 8001c16:	4619      	mov	r1, r3
 8001c18:	4610      	mov	r0, r2
 8001c1a:	f000 ff87 	bl	8002b2c <SDMMC_CmdSendStatus>
 8001c1e:	6538      	str	r0, [r7, #80]	; 0x50
  if(errorstate != HAL_MMC_ERROR_NONE)
 8001c20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d005      	beq.n	8001c32 <MMC_InitCard+0x1c6>
  {
    hmmc->ErrorCode |= errorstate;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001c2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c2c:	431a      	orrs	r2, r3
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Configure the SDIO peripheral */
  Init = hmmc->Init;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	f107 040c 	add.w	r4, r7, #12
 8001c38:	1d1d      	adds	r5, r3, #4
 8001c3a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c3c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c3e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001c42:	e884 0003 	stmia.w	r4, {r0, r1}
  Init.BusWide = SDIO_BUS_WIDE_1B;
 8001c46:	2300      	movs	r3, #0
 8001c48:	61bb      	str	r3, [r7, #24]
  (void)SDIO_Init(hmmc->Instance, Init);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681d      	ldr	r5, [r3, #0]
 8001c4e:	466c      	mov	r4, sp
 8001c50:	f107 0318 	add.w	r3, r7, #24
 8001c54:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001c58:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001c5c:	f107 030c 	add.w	r3, r7, #12
 8001c60:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001c62:	4628      	mov	r0, r5
 8001c64:	f000 fdd4 	bl	8002810 <SDIO_Init>

  /* All cards are initialized */
  return HAL_MMC_ERROR_NONE;
 8001c68:	2300      	movs	r3, #0
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	3758      	adds	r7, #88	; 0x58
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001c74 <MMC_PowerON>:
  *         in the MMC handle.
  * @param  hmmc: Pointer to MMC handle
  * @retval error state
  */
static uint32_t MMC_PowerON(MMC_HandleTypeDef *hmmc)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b086      	sub	sp, #24
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8001c80:	2300      	movs	r3, #0
 8001c82:	617b      	str	r3, [r7, #20]
 8001c84:	2300      	movs	r3, #0
 8001c86:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hmmc->Instance);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f000 fece 	bl	8002a2e <SDMMC_CmdGoIdleState>
 8001c92:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_MMC_ERROR_NONE)
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d027      	beq.n	8001cea <MMC_PowerON+0x76>
  {
    return errorstate;
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	e034      	b.n	8001d08 <MMC_PowerON+0x94>
  }

  while(validvoltage == 0U)
  {
    if(count++ == SDMMC_MAX_VOLT_TRIAL)
 8001c9e:	68bb      	ldr	r3, [r7, #8]
 8001ca0:	1c5a      	adds	r2, r3, #1
 8001ca2:	60ba      	str	r2, [r7, #8]
 8001ca4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d102      	bne.n	8001cb2 <MMC_PowerON+0x3e>
    {
      return HAL_MMC_ERROR_INVALID_VOLTRANGE;
 8001cac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001cb0:	e02a      	b.n	8001d08 <MMC_PowerON+0x94>
    }

    /* SEND CMD1 APP_CMD with voltage range as argument */
    errorstate = SDMMC_CmdOpCondition(hmmc->Instance, MMC_VOLTAGE_RANGE);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4916      	ldr	r1, [pc, #88]	; (8001d10 <MMC_PowerON+0x9c>)
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f000 ff59 	bl	8002b70 <SDMMC_CmdOpCondition>
 8001cbe:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_MMC_ERROR_NONE)
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d002      	beq.n	8001ccc <MMC_PowerON+0x58>
    {
      return HAL_MMC_ERROR_UNSUPPORTED_FEATURE;
 8001cc6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001cca:	e01d      	b.n	8001d08 <MMC_PowerON+0x94>
    }

    /* Get command response */
    response = SDIO_GetResponse(hmmc->Instance, SDIO_RESP1);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	2100      	movs	r1, #0
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f000 fe27 	bl	8002926 <SDIO_GetResponse>
 8001cd8:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	0fdb      	lsrs	r3, r3, #31
 8001cde:	2b01      	cmp	r3, #1
 8001ce0:	d101      	bne.n	8001ce6 <MMC_PowerON+0x72>
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e000      	b.n	8001ce8 <MMC_PowerON+0x74>
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	613b      	str	r3, [r7, #16]
  while(validvoltage == 0U)
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d0d6      	beq.n	8001c9e <MMC_PowerON+0x2a>
  }

  /* When power routine is finished and command returns valid voltage */
  if (((response & (0xFF000000U)) >> 24U) == 0xC0U)
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	0e1b      	lsrs	r3, r3, #24
 8001cf4:	2bc0      	cmp	r3, #192	; 0xc0
 8001cf6:	d103      	bne.n	8001d00 <MMC_PowerON+0x8c>
  {
    hmmc->MmcCard.CardType = MMC_HIGH_CAPACITY_CARD;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	645a      	str	r2, [r3, #68]	; 0x44
 8001cfe:	e002      	b.n	8001d06 <MMC_PowerON+0x92>
  }
  else
  {
    hmmc->MmcCard.CardType = MMC_LOW_CAPACITY_CARD;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2200      	movs	r2, #0
 8001d04:	645a      	str	r2, [r3, #68]	; 0x44
  }

  return HAL_MMC_ERROR_NONE;
 8001d06:	2300      	movs	r3, #0
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	3718      	adds	r7, #24
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}
 8001d10:	c0ff8000 	.word	0xc0ff8000

08001d14 <MMC_ReadExtCSD>:
  * @param  FieldIndex: Index of the field to be read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
static uint32_t MMC_ReadExtCSD(MMC_HandleTypeDef *hmmc, uint32_t *pFieldData, uint16_t FieldIndex, uint32_t Timeout)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b090      	sub	sp, #64	; 0x40
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	60f8      	str	r0, [r7, #12]
 8001d1c:	60b9      	str	r1, [r7, #8]
 8001d1e:	603b      	str	r3, [r7, #0]
 8001d20:	4613      	mov	r3, r2
 8001d22:	80fb      	strh	r3, [r7, #6]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8001d24:	f7fe feba 	bl	8000a9c <HAL_GetTick>
 8001d28:	6378      	str	r0, [r7, #52]	; 0x34
  uint32_t count;
  uint32_t i = 0;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t tmp_data;

  hmmc->ErrorCode = HAL_MMC_ERROR_NONE;
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	2200      	movs	r2, #0
 8001d32:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize data control register */
  hmmc->Instance->DCTRL = 0;
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	2200      	movs	r2, #0
 8001d3a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Configure the MMC DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8001d3c:	f04f 33ff 	mov.w	r3, #4294967295
 8001d40:	617b      	str	r3, [r7, #20]
  config.DataLength    = 512;
 8001d42:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d46:	61bb      	str	r3, [r7, #24]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8001d48:	2390      	movs	r3, #144	; 0x90
 8001d4a:	61fb      	str	r3, [r7, #28]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8001d4c:	2302      	movs	r3, #2
 8001d4e:	623b      	str	r3, [r7, #32]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8001d50:	2300      	movs	r3, #0
 8001d52:	627b      	str	r3, [r7, #36]	; 0x24
  config.DPSM          = SDIO_DPSM_ENABLE;
 8001d54:	2301      	movs	r3, #1
 8001d56:	62bb      	str	r3, [r7, #40]	; 0x28
  (void)SDIO_ConfigData(hmmc->Instance, &config);
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f107 0214 	add.w	r2, r7, #20
 8001d60:	4611      	mov	r1, r2
 8001d62:	4618      	mov	r0, r3
 8001d64:	f000 fdf2 	bl	800294c <SDIO_ConfigData>

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdSendEXTCSD(hmmc->Instance, 0);
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	2100      	movs	r1, #0
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f000 ff3f 	bl	8002bf2 <SDMMC_CmdSendEXTCSD>
 8001d74:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_MMC_ERROR_NONE)
 8001d76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d04e      	beq.n	8001e1a <MMC_ReadExtCSD+0x106>
  {
    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDIO_STATIC_FLAGS);
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a3a      	ldr	r2, [pc, #232]	; (8001e6c <MMC_ReadExtCSD+0x158>)
 8001d82:	639a      	str	r2, [r3, #56]	; 0x38
    hmmc->ErrorCode |= errorstate;
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001d88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d8a:	431a      	orrs	r2, r3
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	639a      	str	r2, [r3, #56]	; 0x38
    hmmc->State = HAL_MMC_STATE_READY;
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	2201      	movs	r2, #1
 8001d94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	e062      	b.n	8001e62 <MMC_ReadExtCSD+0x14e>
  }

  /* Poll on SDMMC flags */
  while(!__HAL_MMC_GET_FLAG(hmmc, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
  {
    if(__HAL_MMC_GET_FLAG(hmmc, SDIO_FLAG_RXFIFOHF))
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001da2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d01c      	beq.n	8001de4 <MMC_ReadExtCSD+0xd0>
    {
      /* Read data from SDMMC Rx FIFO */
      for(count = 0U; count < 8U; count++)
 8001daa:	2300      	movs	r3, #0
 8001dac:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001dae:	e013      	b.n	8001dd8 <MMC_ReadExtCSD+0xc4>
      {
        tmp_data = SDIO_ReadFIFO(hmmc->Instance);
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4618      	mov	r0, r3
 8001db6:	f000 fd56 	bl	8002866 <SDIO_ReadFIFO>
 8001dba:	62f8      	str	r0, [r7, #44]	; 0x2c
        /* eg : SEC_COUNT   : FieldIndex = 212 => i+count = 53 */
        /*      DEVICE_TYPE : FieldIndex = 196 => i+count = 49 */
        if ((i + count) == ((uint32_t)FieldIndex/4U))
 8001dbc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001dbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001dc0:	4413      	add	r3, r2
 8001dc2:	88fa      	ldrh	r2, [r7, #6]
 8001dc4:	0892      	lsrs	r2, r2, #2
 8001dc6:	b292      	uxth	r2, r2
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d102      	bne.n	8001dd2 <MMC_ReadExtCSD+0xbe>
        {
          *pFieldData = tmp_data;
 8001dcc:	68bb      	ldr	r3, [r7, #8]
 8001dce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001dd0:	601a      	str	r2, [r3, #0]
      for(count = 0U; count < 8U; count++)
 8001dd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001dd4:	3301      	adds	r3, #1
 8001dd6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001dd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001dda:	2b07      	cmp	r3, #7
 8001ddc:	d9e8      	bls.n	8001db0 <MMC_ReadExtCSD+0x9c>
        }
      }
      i += 8U;
 8001dde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001de0:	3308      	adds	r3, #8
 8001de2:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8001de4:	f7fe fe5a 	bl	8000a9c <HAL_GetTick>
 8001de8:	4602      	mov	r2, r0
 8001dea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001dec:	1ad3      	subs	r3, r2, r3
 8001dee:	683a      	ldr	r2, [r7, #0]
 8001df0:	429a      	cmp	r2, r3
 8001df2:	d902      	bls.n	8001dfa <MMC_ReadExtCSD+0xe6>
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d10f      	bne.n	8001e1a <MMC_ReadExtCSD+0x106>
    {
      /* Clear all the static flags */
      __HAL_MMC_CLEAR_FLAG(hmmc, SDIO_STATIC_FLAGS);
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4a1b      	ldr	r2, [pc, #108]	; (8001e6c <MMC_ReadExtCSD+0x158>)
 8001e00:	639a      	str	r2, [r3, #56]	; 0x38
      hmmc->ErrorCode |= HAL_MMC_ERROR_TIMEOUT;
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e06:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	639a      	str	r2, [r3, #56]	; 0x38
      hmmc->State= HAL_MMC_STATE_READY;
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	2201      	movs	r2, #1
 8001e12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_TIMEOUT;
 8001e16:	2303      	movs	r3, #3
 8001e18:	e023      	b.n	8001e62 <MMC_ReadExtCSD+0x14e>
  while(!__HAL_MMC_GET_FLAG(hmmc, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e20:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d0b9      	beq.n	8001d9c <MMC_ReadExtCSD+0x88>
    }
  }

  /* While card is not ready for data and trial number for sending CMD13 is not exceeded */
  errorstate = SDMMC_CmdSendStatus(hmmc->Instance, (uint32_t)(((uint32_t)hmmc->MmcCard.RelCardAdd) << 16));
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	681a      	ldr	r2, [r3, #0]
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e30:	041b      	lsls	r3, r3, #16
 8001e32:	4619      	mov	r1, r3
 8001e34:	4610      	mov	r0, r2
 8001e36:	f000 fe79 	bl	8002b2c <SDMMC_CmdSendStatus>
 8001e3a:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_MMC_ERROR_NONE)
 8001e3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d005      	beq.n	8001e4e <MMC_ReadExtCSD+0x13a>
  {
    hmmc->ErrorCode |= errorstate;
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001e46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e48:	431a      	orrs	r2, r3
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Clear all the static flags */
  __HAL_MMC_CLEAR_FLAG(hmmc, SDIO_STATIC_DATA_FLAGS);
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f240 523a 	movw	r2, #1338	; 0x53a
 8001e56:	639a      	str	r2, [r3, #56]	; 0x38

  hmmc->State = HAL_MMC_STATE_READY;
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001e60:	2300      	movs	r3, #0
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	3740      	adds	r7, #64	; 0x40
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	bf00      	nop
 8001e6c:	004005ff 	.word	0x004005ff

08001e70 <MMC_PwrClassUpdate>:
  * @param  Wide Wide of MMC bus
  * @param  Speed Speed of the MMC bus
  * @retval MMC Card error state
  */
static uint32_t MMC_PwrClassUpdate(MMC_HandleTypeDef *hmmc, uint32_t Wide)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b088      	sub	sp, #32
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
 8001e78:	6039      	str	r1, [r7, #0]
  uint32_t count;
  uint32_t response = 0U;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	61bb      	str	r3, [r7, #24]
  uint32_t errorstate = HAL_MMC_ERROR_NONE;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	617b      	str	r3, [r7, #20]
  uint32_t power_class, supported_pwr_class;

  if((Wide == SDIO_BUS_WIDE_8B) || (Wide == SDIO_BUS_WIDE_4B))
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e88:	d003      	beq.n	8001e92 <MMC_PwrClassUpdate+0x22>
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001e90:	d174      	bne.n	8001f7c <MMC_PwrClassUpdate+0x10c>
  {
    power_class = 0U; /* Default value after power-on or software reset */
 8001e92:	2300      	movs	r3, #0
 8001e94:	60fb      	str	r3, [r7, #12]

    /* Read the PowerClass field of the Extended CSD register */
    if(MMC_ReadExtCSD(hmmc, &power_class, 187, SDMMC_DATATIMEOUT) != HAL_OK) /* Field POWER_CLASS [187] */
 8001e96:	f107 010c 	add.w	r1, r7, #12
 8001e9a:	f04f 33ff 	mov.w	r3, #4294967295
 8001e9e:	22bb      	movs	r2, #187	; 0xbb
 8001ea0:	6878      	ldr	r0, [r7, #4]
 8001ea2:	f7ff ff37 	bl	8001d14 <MMC_ReadExtCSD>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d003      	beq.n	8001eb4 <MMC_PwrClassUpdate+0x44>
    {
      errorstate = SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8001eac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001eb0:	617b      	str	r3, [r7, #20]
 8001eb2:	e002      	b.n	8001eba <MMC_PwrClassUpdate+0x4a>
    }
    else
    {
      power_class = ((power_class >> 24U) & 0x000000FFU);
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	0e1b      	lsrs	r3, r3, #24
 8001eb8:	60fb      	str	r3, [r7, #12]
    }

    /* Get the supported PowerClass field of the Extended CSD register */
    /* Field PWR_CL_26_xxx [201 or 203] */
    supported_pwr_class = ((hmmc->Ext_CSD[(MMC_EXT_CSD_PWR_CL_26_INDEX/4)] >> MMC_EXT_CSD_PWR_CL_26_POS) & 0x000000FFU);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8001ec0:	0e1b      	lsrs	r3, r3, #24
 8001ec2:	613b      	str	r3, [r7, #16]

    if(errorstate == HAL_MMC_ERROR_NONE)
 8001ec4:	697b      	ldr	r3, [r7, #20]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d158      	bne.n	8001f7c <MMC_PwrClassUpdate+0x10c>
    {
      if(Wide == SDIO_BUS_WIDE_8B)
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ed0:	d102      	bne.n	8001ed8 <MMC_PwrClassUpdate+0x68>
      {
        /* Bit [7:4] : power class for 8-bits bus configuration - Bit [3:0] : power class for 4-bits bus configuration */
        supported_pwr_class = (supported_pwr_class >> 4U);
 8001ed2:	693b      	ldr	r3, [r7, #16]
 8001ed4:	091b      	lsrs	r3, r3, #4
 8001ed6:	613b      	str	r3, [r7, #16]
      }

      if ((power_class & 0x0FU) != (supported_pwr_class & 0x0FU))
 8001ed8:	68fa      	ldr	r2, [r7, #12]
 8001eda:	693b      	ldr	r3, [r7, #16]
 8001edc:	4053      	eors	r3, r2
 8001ede:	f003 030f 	and.w	r3, r3, #15
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d04a      	beq.n	8001f7c <MMC_PwrClassUpdate+0x10c>
      {
        /* Need to change current power class */
        errorstate = SDMMC_CmdSwitch(hmmc->Instance, (0x03BB0000U | ((supported_pwr_class & 0x0FU) << 8U)));
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681a      	ldr	r2, [r3, #0]
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	021b      	lsls	r3, r3, #8
 8001eee:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8001ef2:	f043 736e 	orr.w	r3, r3, #62390272	; 0x3b80000
 8001ef6:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 8001efa:	4619      	mov	r1, r3
 8001efc:	4610      	mov	r0, r2
 8001efe:	f000 fe56 	bl	8002bae <SDMMC_CmdSwitch>
 8001f02:	6178      	str	r0, [r7, #20]

        if(errorstate == HAL_MMC_ERROR_NONE)
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d138      	bne.n	8001f7c <MMC_PwrClassUpdate+0x10c>
        {
          /* While card is not ready for data and trial number for sending CMD13 is not exceeded */
          count = SDMMC_MAX_TRIAL;
 8001f0a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f0e:	61fb      	str	r3, [r7, #28]
          do
          {
            errorstate = SDMMC_CmdSendStatus(hmmc->Instance, (uint32_t)(((uint32_t)hmmc->MmcCard.RelCardAdd) << 16U));
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681a      	ldr	r2, [r3, #0]
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f18:	041b      	lsls	r3, r3, #16
 8001f1a:	4619      	mov	r1, r3
 8001f1c:	4610      	mov	r0, r2
 8001f1e:	f000 fe05 	bl	8002b2c <SDMMC_CmdSendStatus>
 8001f22:	6178      	str	r0, [r7, #20]
            if(errorstate != HAL_MMC_ERROR_NONE)
 8001f24:	697b      	ldr	r3, [r7, #20]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d112      	bne.n	8001f50 <MMC_PwrClassUpdate+0xe0>
            {
              break;
            }

            /* Get command response */
            response = SDIO_GetResponse(hmmc->Instance, SDIO_RESP1);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	2100      	movs	r1, #0
 8001f30:	4618      	mov	r0, r3
 8001f32:	f000 fcf8 	bl	8002926 <SDIO_GetResponse>
 8001f36:	61b8      	str	r0, [r7, #24]
            count--;
 8001f38:	69fb      	ldr	r3, [r7, #28]
 8001f3a:	3b01      	subs	r3, #1
 8001f3c:	61fb      	str	r3, [r7, #28]
          }while(((response & 0x100U) == 0U) && (count != 0U));
 8001f3e:	69bb      	ldr	r3, [r7, #24]
 8001f40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d104      	bne.n	8001f52 <MMC_PwrClassUpdate+0xe2>
 8001f48:	69fb      	ldr	r3, [r7, #28]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d1e0      	bne.n	8001f10 <MMC_PwrClassUpdate+0xa0>
 8001f4e:	e000      	b.n	8001f52 <MMC_PwrClassUpdate+0xe2>
              break;
 8001f50:	bf00      	nop

          /* Check the status after the switch command execution */
          if ((count != 0U) && (errorstate == HAL_MMC_ERROR_NONE))
 8001f52:	69fb      	ldr	r3, [r7, #28]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d00b      	beq.n	8001f70 <MMC_PwrClassUpdate+0x100>
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d108      	bne.n	8001f70 <MMC_PwrClassUpdate+0x100>
          {
            /* Check the bit SWITCH_ERROR of the device status */
            if ((response & 0x80U) != 0U)
 8001f5e:	69bb      	ldr	r3, [r7, #24]
 8001f60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d009      	beq.n	8001f7c <MMC_PwrClassUpdate+0x10c>
            {
              errorstate = SDMMC_ERROR_UNSUPPORTED_FEATURE;
 8001f68:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001f6c:	617b      	str	r3, [r7, #20]
            if ((response & 0x80U) != 0U)
 8001f6e:	e005      	b.n	8001f7c <MMC_PwrClassUpdate+0x10c>
            }
          }
          else if (count == 0U)
 8001f70:	69fb      	ldr	r3, [r7, #28]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d102      	bne.n	8001f7c <MMC_PwrClassUpdate+0x10c>
          {
            errorstate = SDMMC_ERROR_TIMEOUT;
 8001f76:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001f7a:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return errorstate;
 8001f7c:	697b      	ldr	r3, [r7, #20]
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	3720      	adds	r7, #32
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}
	...

08001f88 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b086      	sub	sp, #24
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d101      	bne.n	8001f9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f96:	2301      	movs	r3, #1
 8001f98:	e267      	b.n	800246a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f003 0301 	and.w	r3, r3, #1
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d075      	beq.n	8002092 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001fa6:	4b88      	ldr	r3, [pc, #544]	; (80021c8 <HAL_RCC_OscConfig+0x240>)
 8001fa8:	689b      	ldr	r3, [r3, #8]
 8001faa:	f003 030c 	and.w	r3, r3, #12
 8001fae:	2b04      	cmp	r3, #4
 8001fb0:	d00c      	beq.n	8001fcc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001fb2:	4b85      	ldr	r3, [pc, #532]	; (80021c8 <HAL_RCC_OscConfig+0x240>)
 8001fb4:	689b      	ldr	r3, [r3, #8]
 8001fb6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001fba:	2b08      	cmp	r3, #8
 8001fbc:	d112      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001fbe:	4b82      	ldr	r3, [pc, #520]	; (80021c8 <HAL_RCC_OscConfig+0x240>)
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fc6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001fca:	d10b      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fcc:	4b7e      	ldr	r3, [pc, #504]	; (80021c8 <HAL_RCC_OscConfig+0x240>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d05b      	beq.n	8002090 <HAL_RCC_OscConfig+0x108>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d157      	bne.n	8002090 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	e242      	b.n	800246a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fec:	d106      	bne.n	8001ffc <HAL_RCC_OscConfig+0x74>
 8001fee:	4b76      	ldr	r3, [pc, #472]	; (80021c8 <HAL_RCC_OscConfig+0x240>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4a75      	ldr	r2, [pc, #468]	; (80021c8 <HAL_RCC_OscConfig+0x240>)
 8001ff4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ff8:	6013      	str	r3, [r2, #0]
 8001ffa:	e01d      	b.n	8002038 <HAL_RCC_OscConfig+0xb0>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002004:	d10c      	bne.n	8002020 <HAL_RCC_OscConfig+0x98>
 8002006:	4b70      	ldr	r3, [pc, #448]	; (80021c8 <HAL_RCC_OscConfig+0x240>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4a6f      	ldr	r2, [pc, #444]	; (80021c8 <HAL_RCC_OscConfig+0x240>)
 800200c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002010:	6013      	str	r3, [r2, #0]
 8002012:	4b6d      	ldr	r3, [pc, #436]	; (80021c8 <HAL_RCC_OscConfig+0x240>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a6c      	ldr	r2, [pc, #432]	; (80021c8 <HAL_RCC_OscConfig+0x240>)
 8002018:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800201c:	6013      	str	r3, [r2, #0]
 800201e:	e00b      	b.n	8002038 <HAL_RCC_OscConfig+0xb0>
 8002020:	4b69      	ldr	r3, [pc, #420]	; (80021c8 <HAL_RCC_OscConfig+0x240>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a68      	ldr	r2, [pc, #416]	; (80021c8 <HAL_RCC_OscConfig+0x240>)
 8002026:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800202a:	6013      	str	r3, [r2, #0]
 800202c:	4b66      	ldr	r3, [pc, #408]	; (80021c8 <HAL_RCC_OscConfig+0x240>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a65      	ldr	r2, [pc, #404]	; (80021c8 <HAL_RCC_OscConfig+0x240>)
 8002032:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002036:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d013      	beq.n	8002068 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002040:	f7fe fd2c 	bl	8000a9c <HAL_GetTick>
 8002044:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002046:	e008      	b.n	800205a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002048:	f7fe fd28 	bl	8000a9c <HAL_GetTick>
 800204c:	4602      	mov	r2, r0
 800204e:	693b      	ldr	r3, [r7, #16]
 8002050:	1ad3      	subs	r3, r2, r3
 8002052:	2b64      	cmp	r3, #100	; 0x64
 8002054:	d901      	bls.n	800205a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002056:	2303      	movs	r3, #3
 8002058:	e207      	b.n	800246a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800205a:	4b5b      	ldr	r3, [pc, #364]	; (80021c8 <HAL_RCC_OscConfig+0x240>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002062:	2b00      	cmp	r3, #0
 8002064:	d0f0      	beq.n	8002048 <HAL_RCC_OscConfig+0xc0>
 8002066:	e014      	b.n	8002092 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002068:	f7fe fd18 	bl	8000a9c <HAL_GetTick>
 800206c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800206e:	e008      	b.n	8002082 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002070:	f7fe fd14 	bl	8000a9c <HAL_GetTick>
 8002074:	4602      	mov	r2, r0
 8002076:	693b      	ldr	r3, [r7, #16]
 8002078:	1ad3      	subs	r3, r2, r3
 800207a:	2b64      	cmp	r3, #100	; 0x64
 800207c:	d901      	bls.n	8002082 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800207e:	2303      	movs	r3, #3
 8002080:	e1f3      	b.n	800246a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002082:	4b51      	ldr	r3, [pc, #324]	; (80021c8 <HAL_RCC_OscConfig+0x240>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800208a:	2b00      	cmp	r3, #0
 800208c:	d1f0      	bne.n	8002070 <HAL_RCC_OscConfig+0xe8>
 800208e:	e000      	b.n	8002092 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002090:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f003 0302 	and.w	r3, r3, #2
 800209a:	2b00      	cmp	r3, #0
 800209c:	d063      	beq.n	8002166 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800209e:	4b4a      	ldr	r3, [pc, #296]	; (80021c8 <HAL_RCC_OscConfig+0x240>)
 80020a0:	689b      	ldr	r3, [r3, #8]
 80020a2:	f003 030c 	and.w	r3, r3, #12
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d00b      	beq.n	80020c2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80020aa:	4b47      	ldr	r3, [pc, #284]	; (80021c8 <HAL_RCC_OscConfig+0x240>)
 80020ac:	689b      	ldr	r3, [r3, #8]
 80020ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80020b2:	2b08      	cmp	r3, #8
 80020b4:	d11c      	bne.n	80020f0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80020b6:	4b44      	ldr	r3, [pc, #272]	; (80021c8 <HAL_RCC_OscConfig+0x240>)
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d116      	bne.n	80020f0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020c2:	4b41      	ldr	r3, [pc, #260]	; (80021c8 <HAL_RCC_OscConfig+0x240>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f003 0302 	and.w	r3, r3, #2
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d005      	beq.n	80020da <HAL_RCC_OscConfig+0x152>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	68db      	ldr	r3, [r3, #12]
 80020d2:	2b01      	cmp	r3, #1
 80020d4:	d001      	beq.n	80020da <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80020d6:	2301      	movs	r3, #1
 80020d8:	e1c7      	b.n	800246a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020da:	4b3b      	ldr	r3, [pc, #236]	; (80021c8 <HAL_RCC_OscConfig+0x240>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	691b      	ldr	r3, [r3, #16]
 80020e6:	00db      	lsls	r3, r3, #3
 80020e8:	4937      	ldr	r1, [pc, #220]	; (80021c8 <HAL_RCC_OscConfig+0x240>)
 80020ea:	4313      	orrs	r3, r2
 80020ec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020ee:	e03a      	b.n	8002166 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	68db      	ldr	r3, [r3, #12]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d020      	beq.n	800213a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020f8:	4b34      	ldr	r3, [pc, #208]	; (80021cc <HAL_RCC_OscConfig+0x244>)
 80020fa:	2201      	movs	r2, #1
 80020fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020fe:	f7fe fccd 	bl	8000a9c <HAL_GetTick>
 8002102:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002104:	e008      	b.n	8002118 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002106:	f7fe fcc9 	bl	8000a9c <HAL_GetTick>
 800210a:	4602      	mov	r2, r0
 800210c:	693b      	ldr	r3, [r7, #16]
 800210e:	1ad3      	subs	r3, r2, r3
 8002110:	2b02      	cmp	r3, #2
 8002112:	d901      	bls.n	8002118 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002114:	2303      	movs	r3, #3
 8002116:	e1a8      	b.n	800246a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002118:	4b2b      	ldr	r3, [pc, #172]	; (80021c8 <HAL_RCC_OscConfig+0x240>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f003 0302 	and.w	r3, r3, #2
 8002120:	2b00      	cmp	r3, #0
 8002122:	d0f0      	beq.n	8002106 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002124:	4b28      	ldr	r3, [pc, #160]	; (80021c8 <HAL_RCC_OscConfig+0x240>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	691b      	ldr	r3, [r3, #16]
 8002130:	00db      	lsls	r3, r3, #3
 8002132:	4925      	ldr	r1, [pc, #148]	; (80021c8 <HAL_RCC_OscConfig+0x240>)
 8002134:	4313      	orrs	r3, r2
 8002136:	600b      	str	r3, [r1, #0]
 8002138:	e015      	b.n	8002166 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800213a:	4b24      	ldr	r3, [pc, #144]	; (80021cc <HAL_RCC_OscConfig+0x244>)
 800213c:	2200      	movs	r2, #0
 800213e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002140:	f7fe fcac 	bl	8000a9c <HAL_GetTick>
 8002144:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002146:	e008      	b.n	800215a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002148:	f7fe fca8 	bl	8000a9c <HAL_GetTick>
 800214c:	4602      	mov	r2, r0
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	1ad3      	subs	r3, r2, r3
 8002152:	2b02      	cmp	r3, #2
 8002154:	d901      	bls.n	800215a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002156:	2303      	movs	r3, #3
 8002158:	e187      	b.n	800246a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800215a:	4b1b      	ldr	r3, [pc, #108]	; (80021c8 <HAL_RCC_OscConfig+0x240>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f003 0302 	and.w	r3, r3, #2
 8002162:	2b00      	cmp	r3, #0
 8002164:	d1f0      	bne.n	8002148 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f003 0308 	and.w	r3, r3, #8
 800216e:	2b00      	cmp	r3, #0
 8002170:	d036      	beq.n	80021e0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	695b      	ldr	r3, [r3, #20]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d016      	beq.n	80021a8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800217a:	4b15      	ldr	r3, [pc, #84]	; (80021d0 <HAL_RCC_OscConfig+0x248>)
 800217c:	2201      	movs	r2, #1
 800217e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002180:	f7fe fc8c 	bl	8000a9c <HAL_GetTick>
 8002184:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002186:	e008      	b.n	800219a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002188:	f7fe fc88 	bl	8000a9c <HAL_GetTick>
 800218c:	4602      	mov	r2, r0
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	1ad3      	subs	r3, r2, r3
 8002192:	2b02      	cmp	r3, #2
 8002194:	d901      	bls.n	800219a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002196:	2303      	movs	r3, #3
 8002198:	e167      	b.n	800246a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800219a:	4b0b      	ldr	r3, [pc, #44]	; (80021c8 <HAL_RCC_OscConfig+0x240>)
 800219c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800219e:	f003 0302 	and.w	r3, r3, #2
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d0f0      	beq.n	8002188 <HAL_RCC_OscConfig+0x200>
 80021a6:	e01b      	b.n	80021e0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021a8:	4b09      	ldr	r3, [pc, #36]	; (80021d0 <HAL_RCC_OscConfig+0x248>)
 80021aa:	2200      	movs	r2, #0
 80021ac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021ae:	f7fe fc75 	bl	8000a9c <HAL_GetTick>
 80021b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021b4:	e00e      	b.n	80021d4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021b6:	f7fe fc71 	bl	8000a9c <HAL_GetTick>
 80021ba:	4602      	mov	r2, r0
 80021bc:	693b      	ldr	r3, [r7, #16]
 80021be:	1ad3      	subs	r3, r2, r3
 80021c0:	2b02      	cmp	r3, #2
 80021c2:	d907      	bls.n	80021d4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80021c4:	2303      	movs	r3, #3
 80021c6:	e150      	b.n	800246a <HAL_RCC_OscConfig+0x4e2>
 80021c8:	40023800 	.word	0x40023800
 80021cc:	42470000 	.word	0x42470000
 80021d0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021d4:	4b88      	ldr	r3, [pc, #544]	; (80023f8 <HAL_RCC_OscConfig+0x470>)
 80021d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021d8:	f003 0302 	and.w	r3, r3, #2
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d1ea      	bne.n	80021b6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f003 0304 	and.w	r3, r3, #4
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	f000 8097 	beq.w	800231c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021ee:	2300      	movs	r3, #0
 80021f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021f2:	4b81      	ldr	r3, [pc, #516]	; (80023f8 <HAL_RCC_OscConfig+0x470>)
 80021f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d10f      	bne.n	800221e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021fe:	2300      	movs	r3, #0
 8002200:	60bb      	str	r3, [r7, #8]
 8002202:	4b7d      	ldr	r3, [pc, #500]	; (80023f8 <HAL_RCC_OscConfig+0x470>)
 8002204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002206:	4a7c      	ldr	r2, [pc, #496]	; (80023f8 <HAL_RCC_OscConfig+0x470>)
 8002208:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800220c:	6413      	str	r3, [r2, #64]	; 0x40
 800220e:	4b7a      	ldr	r3, [pc, #488]	; (80023f8 <HAL_RCC_OscConfig+0x470>)
 8002210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002212:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002216:	60bb      	str	r3, [r7, #8]
 8002218:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800221a:	2301      	movs	r3, #1
 800221c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800221e:	4b77      	ldr	r3, [pc, #476]	; (80023fc <HAL_RCC_OscConfig+0x474>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002226:	2b00      	cmp	r3, #0
 8002228:	d118      	bne.n	800225c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800222a:	4b74      	ldr	r3, [pc, #464]	; (80023fc <HAL_RCC_OscConfig+0x474>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4a73      	ldr	r2, [pc, #460]	; (80023fc <HAL_RCC_OscConfig+0x474>)
 8002230:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002234:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002236:	f7fe fc31 	bl	8000a9c <HAL_GetTick>
 800223a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800223c:	e008      	b.n	8002250 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800223e:	f7fe fc2d 	bl	8000a9c <HAL_GetTick>
 8002242:	4602      	mov	r2, r0
 8002244:	693b      	ldr	r3, [r7, #16]
 8002246:	1ad3      	subs	r3, r2, r3
 8002248:	2b02      	cmp	r3, #2
 800224a:	d901      	bls.n	8002250 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800224c:	2303      	movs	r3, #3
 800224e:	e10c      	b.n	800246a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002250:	4b6a      	ldr	r3, [pc, #424]	; (80023fc <HAL_RCC_OscConfig+0x474>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002258:	2b00      	cmp	r3, #0
 800225a:	d0f0      	beq.n	800223e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	689b      	ldr	r3, [r3, #8]
 8002260:	2b01      	cmp	r3, #1
 8002262:	d106      	bne.n	8002272 <HAL_RCC_OscConfig+0x2ea>
 8002264:	4b64      	ldr	r3, [pc, #400]	; (80023f8 <HAL_RCC_OscConfig+0x470>)
 8002266:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002268:	4a63      	ldr	r2, [pc, #396]	; (80023f8 <HAL_RCC_OscConfig+0x470>)
 800226a:	f043 0301 	orr.w	r3, r3, #1
 800226e:	6713      	str	r3, [r2, #112]	; 0x70
 8002270:	e01c      	b.n	80022ac <HAL_RCC_OscConfig+0x324>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	2b05      	cmp	r3, #5
 8002278:	d10c      	bne.n	8002294 <HAL_RCC_OscConfig+0x30c>
 800227a:	4b5f      	ldr	r3, [pc, #380]	; (80023f8 <HAL_RCC_OscConfig+0x470>)
 800227c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800227e:	4a5e      	ldr	r2, [pc, #376]	; (80023f8 <HAL_RCC_OscConfig+0x470>)
 8002280:	f043 0304 	orr.w	r3, r3, #4
 8002284:	6713      	str	r3, [r2, #112]	; 0x70
 8002286:	4b5c      	ldr	r3, [pc, #368]	; (80023f8 <HAL_RCC_OscConfig+0x470>)
 8002288:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800228a:	4a5b      	ldr	r2, [pc, #364]	; (80023f8 <HAL_RCC_OscConfig+0x470>)
 800228c:	f043 0301 	orr.w	r3, r3, #1
 8002290:	6713      	str	r3, [r2, #112]	; 0x70
 8002292:	e00b      	b.n	80022ac <HAL_RCC_OscConfig+0x324>
 8002294:	4b58      	ldr	r3, [pc, #352]	; (80023f8 <HAL_RCC_OscConfig+0x470>)
 8002296:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002298:	4a57      	ldr	r2, [pc, #348]	; (80023f8 <HAL_RCC_OscConfig+0x470>)
 800229a:	f023 0301 	bic.w	r3, r3, #1
 800229e:	6713      	str	r3, [r2, #112]	; 0x70
 80022a0:	4b55      	ldr	r3, [pc, #340]	; (80023f8 <HAL_RCC_OscConfig+0x470>)
 80022a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022a4:	4a54      	ldr	r2, [pc, #336]	; (80023f8 <HAL_RCC_OscConfig+0x470>)
 80022a6:	f023 0304 	bic.w	r3, r3, #4
 80022aa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	689b      	ldr	r3, [r3, #8]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d015      	beq.n	80022e0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022b4:	f7fe fbf2 	bl	8000a9c <HAL_GetTick>
 80022b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022ba:	e00a      	b.n	80022d2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022bc:	f7fe fbee 	bl	8000a9c <HAL_GetTick>
 80022c0:	4602      	mov	r2, r0
 80022c2:	693b      	ldr	r3, [r7, #16]
 80022c4:	1ad3      	subs	r3, r2, r3
 80022c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d901      	bls.n	80022d2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80022ce:	2303      	movs	r3, #3
 80022d0:	e0cb      	b.n	800246a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022d2:	4b49      	ldr	r3, [pc, #292]	; (80023f8 <HAL_RCC_OscConfig+0x470>)
 80022d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022d6:	f003 0302 	and.w	r3, r3, #2
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d0ee      	beq.n	80022bc <HAL_RCC_OscConfig+0x334>
 80022de:	e014      	b.n	800230a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022e0:	f7fe fbdc 	bl	8000a9c <HAL_GetTick>
 80022e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022e6:	e00a      	b.n	80022fe <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022e8:	f7fe fbd8 	bl	8000a9c <HAL_GetTick>
 80022ec:	4602      	mov	r2, r0
 80022ee:	693b      	ldr	r3, [r7, #16]
 80022f0:	1ad3      	subs	r3, r2, r3
 80022f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d901      	bls.n	80022fe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80022fa:	2303      	movs	r3, #3
 80022fc:	e0b5      	b.n	800246a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022fe:	4b3e      	ldr	r3, [pc, #248]	; (80023f8 <HAL_RCC_OscConfig+0x470>)
 8002300:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002302:	f003 0302 	and.w	r3, r3, #2
 8002306:	2b00      	cmp	r3, #0
 8002308:	d1ee      	bne.n	80022e8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800230a:	7dfb      	ldrb	r3, [r7, #23]
 800230c:	2b01      	cmp	r3, #1
 800230e:	d105      	bne.n	800231c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002310:	4b39      	ldr	r3, [pc, #228]	; (80023f8 <HAL_RCC_OscConfig+0x470>)
 8002312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002314:	4a38      	ldr	r2, [pc, #224]	; (80023f8 <HAL_RCC_OscConfig+0x470>)
 8002316:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800231a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	699b      	ldr	r3, [r3, #24]
 8002320:	2b00      	cmp	r3, #0
 8002322:	f000 80a1 	beq.w	8002468 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002326:	4b34      	ldr	r3, [pc, #208]	; (80023f8 <HAL_RCC_OscConfig+0x470>)
 8002328:	689b      	ldr	r3, [r3, #8]
 800232a:	f003 030c 	and.w	r3, r3, #12
 800232e:	2b08      	cmp	r3, #8
 8002330:	d05c      	beq.n	80023ec <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	699b      	ldr	r3, [r3, #24]
 8002336:	2b02      	cmp	r3, #2
 8002338:	d141      	bne.n	80023be <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800233a:	4b31      	ldr	r3, [pc, #196]	; (8002400 <HAL_RCC_OscConfig+0x478>)
 800233c:	2200      	movs	r2, #0
 800233e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002340:	f7fe fbac 	bl	8000a9c <HAL_GetTick>
 8002344:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002346:	e008      	b.n	800235a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002348:	f7fe fba8 	bl	8000a9c <HAL_GetTick>
 800234c:	4602      	mov	r2, r0
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	1ad3      	subs	r3, r2, r3
 8002352:	2b02      	cmp	r3, #2
 8002354:	d901      	bls.n	800235a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002356:	2303      	movs	r3, #3
 8002358:	e087      	b.n	800246a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800235a:	4b27      	ldr	r3, [pc, #156]	; (80023f8 <HAL_RCC_OscConfig+0x470>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002362:	2b00      	cmp	r3, #0
 8002364:	d1f0      	bne.n	8002348 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	69da      	ldr	r2, [r3, #28]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6a1b      	ldr	r3, [r3, #32]
 800236e:	431a      	orrs	r2, r3
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002374:	019b      	lsls	r3, r3, #6
 8002376:	431a      	orrs	r2, r3
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800237c:	085b      	lsrs	r3, r3, #1
 800237e:	3b01      	subs	r3, #1
 8002380:	041b      	lsls	r3, r3, #16
 8002382:	431a      	orrs	r2, r3
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002388:	061b      	lsls	r3, r3, #24
 800238a:	491b      	ldr	r1, [pc, #108]	; (80023f8 <HAL_RCC_OscConfig+0x470>)
 800238c:	4313      	orrs	r3, r2
 800238e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002390:	4b1b      	ldr	r3, [pc, #108]	; (8002400 <HAL_RCC_OscConfig+0x478>)
 8002392:	2201      	movs	r2, #1
 8002394:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002396:	f7fe fb81 	bl	8000a9c <HAL_GetTick>
 800239a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800239c:	e008      	b.n	80023b0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800239e:	f7fe fb7d 	bl	8000a9c <HAL_GetTick>
 80023a2:	4602      	mov	r2, r0
 80023a4:	693b      	ldr	r3, [r7, #16]
 80023a6:	1ad3      	subs	r3, r2, r3
 80023a8:	2b02      	cmp	r3, #2
 80023aa:	d901      	bls.n	80023b0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80023ac:	2303      	movs	r3, #3
 80023ae:	e05c      	b.n	800246a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023b0:	4b11      	ldr	r3, [pc, #68]	; (80023f8 <HAL_RCC_OscConfig+0x470>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d0f0      	beq.n	800239e <HAL_RCC_OscConfig+0x416>
 80023bc:	e054      	b.n	8002468 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023be:	4b10      	ldr	r3, [pc, #64]	; (8002400 <HAL_RCC_OscConfig+0x478>)
 80023c0:	2200      	movs	r2, #0
 80023c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023c4:	f7fe fb6a 	bl	8000a9c <HAL_GetTick>
 80023c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023ca:	e008      	b.n	80023de <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023cc:	f7fe fb66 	bl	8000a9c <HAL_GetTick>
 80023d0:	4602      	mov	r2, r0
 80023d2:	693b      	ldr	r3, [r7, #16]
 80023d4:	1ad3      	subs	r3, r2, r3
 80023d6:	2b02      	cmp	r3, #2
 80023d8:	d901      	bls.n	80023de <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80023da:	2303      	movs	r3, #3
 80023dc:	e045      	b.n	800246a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023de:	4b06      	ldr	r3, [pc, #24]	; (80023f8 <HAL_RCC_OscConfig+0x470>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d1f0      	bne.n	80023cc <HAL_RCC_OscConfig+0x444>
 80023ea:	e03d      	b.n	8002468 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	699b      	ldr	r3, [r3, #24]
 80023f0:	2b01      	cmp	r3, #1
 80023f2:	d107      	bne.n	8002404 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80023f4:	2301      	movs	r3, #1
 80023f6:	e038      	b.n	800246a <HAL_RCC_OscConfig+0x4e2>
 80023f8:	40023800 	.word	0x40023800
 80023fc:	40007000 	.word	0x40007000
 8002400:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002404:	4b1b      	ldr	r3, [pc, #108]	; (8002474 <HAL_RCC_OscConfig+0x4ec>)
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	699b      	ldr	r3, [r3, #24]
 800240e:	2b01      	cmp	r3, #1
 8002410:	d028      	beq.n	8002464 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800241c:	429a      	cmp	r2, r3
 800241e:	d121      	bne.n	8002464 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800242a:	429a      	cmp	r2, r3
 800242c:	d11a      	bne.n	8002464 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800242e:	68fa      	ldr	r2, [r7, #12]
 8002430:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002434:	4013      	ands	r3, r2
 8002436:	687a      	ldr	r2, [r7, #4]
 8002438:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800243a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800243c:	4293      	cmp	r3, r2
 800243e:	d111      	bne.n	8002464 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800244a:	085b      	lsrs	r3, r3, #1
 800244c:	3b01      	subs	r3, #1
 800244e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002450:	429a      	cmp	r2, r3
 8002452:	d107      	bne.n	8002464 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800245e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002460:	429a      	cmp	r2, r3
 8002462:	d001      	beq.n	8002468 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002464:	2301      	movs	r3, #1
 8002466:	e000      	b.n	800246a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002468:	2300      	movs	r3, #0
}
 800246a:	4618      	mov	r0, r3
 800246c:	3718      	adds	r7, #24
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}
 8002472:	bf00      	nop
 8002474:	40023800 	.word	0x40023800

08002478 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b084      	sub	sp, #16
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
 8002480:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d101      	bne.n	800248c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002488:	2301      	movs	r3, #1
 800248a:	e0cc      	b.n	8002626 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800248c:	4b68      	ldr	r3, [pc, #416]	; (8002630 <HAL_RCC_ClockConfig+0x1b8>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f003 0307 	and.w	r3, r3, #7
 8002494:	683a      	ldr	r2, [r7, #0]
 8002496:	429a      	cmp	r2, r3
 8002498:	d90c      	bls.n	80024b4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800249a:	4b65      	ldr	r3, [pc, #404]	; (8002630 <HAL_RCC_ClockConfig+0x1b8>)
 800249c:	683a      	ldr	r2, [r7, #0]
 800249e:	b2d2      	uxtb	r2, r2
 80024a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024a2:	4b63      	ldr	r3, [pc, #396]	; (8002630 <HAL_RCC_ClockConfig+0x1b8>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f003 0307 	and.w	r3, r3, #7
 80024aa:	683a      	ldr	r2, [r7, #0]
 80024ac:	429a      	cmp	r2, r3
 80024ae:	d001      	beq.n	80024b4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80024b0:	2301      	movs	r3, #1
 80024b2:	e0b8      	b.n	8002626 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f003 0302 	and.w	r3, r3, #2
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d020      	beq.n	8002502 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f003 0304 	and.w	r3, r3, #4
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d005      	beq.n	80024d8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80024cc:	4b59      	ldr	r3, [pc, #356]	; (8002634 <HAL_RCC_ClockConfig+0x1bc>)
 80024ce:	689b      	ldr	r3, [r3, #8]
 80024d0:	4a58      	ldr	r2, [pc, #352]	; (8002634 <HAL_RCC_ClockConfig+0x1bc>)
 80024d2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80024d6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f003 0308 	and.w	r3, r3, #8
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d005      	beq.n	80024f0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80024e4:	4b53      	ldr	r3, [pc, #332]	; (8002634 <HAL_RCC_ClockConfig+0x1bc>)
 80024e6:	689b      	ldr	r3, [r3, #8]
 80024e8:	4a52      	ldr	r2, [pc, #328]	; (8002634 <HAL_RCC_ClockConfig+0x1bc>)
 80024ea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80024ee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024f0:	4b50      	ldr	r3, [pc, #320]	; (8002634 <HAL_RCC_ClockConfig+0x1bc>)
 80024f2:	689b      	ldr	r3, [r3, #8]
 80024f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	689b      	ldr	r3, [r3, #8]
 80024fc:	494d      	ldr	r1, [pc, #308]	; (8002634 <HAL_RCC_ClockConfig+0x1bc>)
 80024fe:	4313      	orrs	r3, r2
 8002500:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f003 0301 	and.w	r3, r3, #1
 800250a:	2b00      	cmp	r3, #0
 800250c:	d044      	beq.n	8002598 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	2b01      	cmp	r3, #1
 8002514:	d107      	bne.n	8002526 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002516:	4b47      	ldr	r3, [pc, #284]	; (8002634 <HAL_RCC_ClockConfig+0x1bc>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800251e:	2b00      	cmp	r3, #0
 8002520:	d119      	bne.n	8002556 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002522:	2301      	movs	r3, #1
 8002524:	e07f      	b.n	8002626 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	2b02      	cmp	r3, #2
 800252c:	d003      	beq.n	8002536 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002532:	2b03      	cmp	r3, #3
 8002534:	d107      	bne.n	8002546 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002536:	4b3f      	ldr	r3, [pc, #252]	; (8002634 <HAL_RCC_ClockConfig+0x1bc>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800253e:	2b00      	cmp	r3, #0
 8002540:	d109      	bne.n	8002556 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002542:	2301      	movs	r3, #1
 8002544:	e06f      	b.n	8002626 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002546:	4b3b      	ldr	r3, [pc, #236]	; (8002634 <HAL_RCC_ClockConfig+0x1bc>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f003 0302 	and.w	r3, r3, #2
 800254e:	2b00      	cmp	r3, #0
 8002550:	d101      	bne.n	8002556 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002552:	2301      	movs	r3, #1
 8002554:	e067      	b.n	8002626 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002556:	4b37      	ldr	r3, [pc, #220]	; (8002634 <HAL_RCC_ClockConfig+0x1bc>)
 8002558:	689b      	ldr	r3, [r3, #8]
 800255a:	f023 0203 	bic.w	r2, r3, #3
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	4934      	ldr	r1, [pc, #208]	; (8002634 <HAL_RCC_ClockConfig+0x1bc>)
 8002564:	4313      	orrs	r3, r2
 8002566:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002568:	f7fe fa98 	bl	8000a9c <HAL_GetTick>
 800256c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800256e:	e00a      	b.n	8002586 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002570:	f7fe fa94 	bl	8000a9c <HAL_GetTick>
 8002574:	4602      	mov	r2, r0
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	1ad3      	subs	r3, r2, r3
 800257a:	f241 3288 	movw	r2, #5000	; 0x1388
 800257e:	4293      	cmp	r3, r2
 8002580:	d901      	bls.n	8002586 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002582:	2303      	movs	r3, #3
 8002584:	e04f      	b.n	8002626 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002586:	4b2b      	ldr	r3, [pc, #172]	; (8002634 <HAL_RCC_ClockConfig+0x1bc>)
 8002588:	689b      	ldr	r3, [r3, #8]
 800258a:	f003 020c 	and.w	r2, r3, #12
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	009b      	lsls	r3, r3, #2
 8002594:	429a      	cmp	r2, r3
 8002596:	d1eb      	bne.n	8002570 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002598:	4b25      	ldr	r3, [pc, #148]	; (8002630 <HAL_RCC_ClockConfig+0x1b8>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f003 0307 	and.w	r3, r3, #7
 80025a0:	683a      	ldr	r2, [r7, #0]
 80025a2:	429a      	cmp	r2, r3
 80025a4:	d20c      	bcs.n	80025c0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025a6:	4b22      	ldr	r3, [pc, #136]	; (8002630 <HAL_RCC_ClockConfig+0x1b8>)
 80025a8:	683a      	ldr	r2, [r7, #0]
 80025aa:	b2d2      	uxtb	r2, r2
 80025ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025ae:	4b20      	ldr	r3, [pc, #128]	; (8002630 <HAL_RCC_ClockConfig+0x1b8>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f003 0307 	and.w	r3, r3, #7
 80025b6:	683a      	ldr	r2, [r7, #0]
 80025b8:	429a      	cmp	r2, r3
 80025ba:	d001      	beq.n	80025c0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80025bc:	2301      	movs	r3, #1
 80025be:	e032      	b.n	8002626 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f003 0304 	and.w	r3, r3, #4
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d008      	beq.n	80025de <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025cc:	4b19      	ldr	r3, [pc, #100]	; (8002634 <HAL_RCC_ClockConfig+0x1bc>)
 80025ce:	689b      	ldr	r3, [r3, #8]
 80025d0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	68db      	ldr	r3, [r3, #12]
 80025d8:	4916      	ldr	r1, [pc, #88]	; (8002634 <HAL_RCC_ClockConfig+0x1bc>)
 80025da:	4313      	orrs	r3, r2
 80025dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f003 0308 	and.w	r3, r3, #8
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d009      	beq.n	80025fe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80025ea:	4b12      	ldr	r3, [pc, #72]	; (8002634 <HAL_RCC_ClockConfig+0x1bc>)
 80025ec:	689b      	ldr	r3, [r3, #8]
 80025ee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	691b      	ldr	r3, [r3, #16]
 80025f6:	00db      	lsls	r3, r3, #3
 80025f8:	490e      	ldr	r1, [pc, #56]	; (8002634 <HAL_RCC_ClockConfig+0x1bc>)
 80025fa:	4313      	orrs	r3, r2
 80025fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80025fe:	f000 f821 	bl	8002644 <HAL_RCC_GetSysClockFreq>
 8002602:	4602      	mov	r2, r0
 8002604:	4b0b      	ldr	r3, [pc, #44]	; (8002634 <HAL_RCC_ClockConfig+0x1bc>)
 8002606:	689b      	ldr	r3, [r3, #8]
 8002608:	091b      	lsrs	r3, r3, #4
 800260a:	f003 030f 	and.w	r3, r3, #15
 800260e:	490a      	ldr	r1, [pc, #40]	; (8002638 <HAL_RCC_ClockConfig+0x1c0>)
 8002610:	5ccb      	ldrb	r3, [r1, r3]
 8002612:	fa22 f303 	lsr.w	r3, r2, r3
 8002616:	4a09      	ldr	r2, [pc, #36]	; (800263c <HAL_RCC_ClockConfig+0x1c4>)
 8002618:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800261a:	4b09      	ldr	r3, [pc, #36]	; (8002640 <HAL_RCC_ClockConfig+0x1c8>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4618      	mov	r0, r3
 8002620:	f7fe f9f8 	bl	8000a14 <HAL_InitTick>

  return HAL_OK;
 8002624:	2300      	movs	r3, #0
}
 8002626:	4618      	mov	r0, r3
 8002628:	3710      	adds	r7, #16
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}
 800262e:	bf00      	nop
 8002630:	40023c00 	.word	0x40023c00
 8002634:	40023800 	.word	0x40023800
 8002638:	08002fe8 	.word	0x08002fe8
 800263c:	20000000 	.word	0x20000000
 8002640:	20000004 	.word	0x20000004

08002644 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002644:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002648:	b090      	sub	sp, #64	; 0x40
 800264a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800264c:	2300      	movs	r3, #0
 800264e:	637b      	str	r3, [r7, #52]	; 0x34
 8002650:	2300      	movs	r3, #0
 8002652:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002654:	2300      	movs	r3, #0
 8002656:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002658:	2300      	movs	r3, #0
 800265a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800265c:	4b59      	ldr	r3, [pc, #356]	; (80027c4 <HAL_RCC_GetSysClockFreq+0x180>)
 800265e:	689b      	ldr	r3, [r3, #8]
 8002660:	f003 030c 	and.w	r3, r3, #12
 8002664:	2b08      	cmp	r3, #8
 8002666:	d00d      	beq.n	8002684 <HAL_RCC_GetSysClockFreq+0x40>
 8002668:	2b08      	cmp	r3, #8
 800266a:	f200 80a1 	bhi.w	80027b0 <HAL_RCC_GetSysClockFreq+0x16c>
 800266e:	2b00      	cmp	r3, #0
 8002670:	d002      	beq.n	8002678 <HAL_RCC_GetSysClockFreq+0x34>
 8002672:	2b04      	cmp	r3, #4
 8002674:	d003      	beq.n	800267e <HAL_RCC_GetSysClockFreq+0x3a>
 8002676:	e09b      	b.n	80027b0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002678:	4b53      	ldr	r3, [pc, #332]	; (80027c8 <HAL_RCC_GetSysClockFreq+0x184>)
 800267a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800267c:	e09b      	b.n	80027b6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800267e:	4b53      	ldr	r3, [pc, #332]	; (80027cc <HAL_RCC_GetSysClockFreq+0x188>)
 8002680:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002682:	e098      	b.n	80027b6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002684:	4b4f      	ldr	r3, [pc, #316]	; (80027c4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800268c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800268e:	4b4d      	ldr	r3, [pc, #308]	; (80027c4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002696:	2b00      	cmp	r3, #0
 8002698:	d028      	beq.n	80026ec <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800269a:	4b4a      	ldr	r3, [pc, #296]	; (80027c4 <HAL_RCC_GetSysClockFreq+0x180>)
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	099b      	lsrs	r3, r3, #6
 80026a0:	2200      	movs	r2, #0
 80026a2:	623b      	str	r3, [r7, #32]
 80026a4:	627a      	str	r2, [r7, #36]	; 0x24
 80026a6:	6a3b      	ldr	r3, [r7, #32]
 80026a8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80026ac:	2100      	movs	r1, #0
 80026ae:	4b47      	ldr	r3, [pc, #284]	; (80027cc <HAL_RCC_GetSysClockFreq+0x188>)
 80026b0:	fb03 f201 	mul.w	r2, r3, r1
 80026b4:	2300      	movs	r3, #0
 80026b6:	fb00 f303 	mul.w	r3, r0, r3
 80026ba:	4413      	add	r3, r2
 80026bc:	4a43      	ldr	r2, [pc, #268]	; (80027cc <HAL_RCC_GetSysClockFreq+0x188>)
 80026be:	fba0 1202 	umull	r1, r2, r0, r2
 80026c2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80026c4:	460a      	mov	r2, r1
 80026c6:	62ba      	str	r2, [r7, #40]	; 0x28
 80026c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80026ca:	4413      	add	r3, r2
 80026cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80026ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026d0:	2200      	movs	r2, #0
 80026d2:	61bb      	str	r3, [r7, #24]
 80026d4:	61fa      	str	r2, [r7, #28]
 80026d6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80026da:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80026de:	f7fd fd7b 	bl	80001d8 <__aeabi_uldivmod>
 80026e2:	4602      	mov	r2, r0
 80026e4:	460b      	mov	r3, r1
 80026e6:	4613      	mov	r3, r2
 80026e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80026ea:	e053      	b.n	8002794 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026ec:	4b35      	ldr	r3, [pc, #212]	; (80027c4 <HAL_RCC_GetSysClockFreq+0x180>)
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	099b      	lsrs	r3, r3, #6
 80026f2:	2200      	movs	r2, #0
 80026f4:	613b      	str	r3, [r7, #16]
 80026f6:	617a      	str	r2, [r7, #20]
 80026f8:	693b      	ldr	r3, [r7, #16]
 80026fa:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80026fe:	f04f 0b00 	mov.w	fp, #0
 8002702:	4652      	mov	r2, sl
 8002704:	465b      	mov	r3, fp
 8002706:	f04f 0000 	mov.w	r0, #0
 800270a:	f04f 0100 	mov.w	r1, #0
 800270e:	0159      	lsls	r1, r3, #5
 8002710:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002714:	0150      	lsls	r0, r2, #5
 8002716:	4602      	mov	r2, r0
 8002718:	460b      	mov	r3, r1
 800271a:	ebb2 080a 	subs.w	r8, r2, sl
 800271e:	eb63 090b 	sbc.w	r9, r3, fp
 8002722:	f04f 0200 	mov.w	r2, #0
 8002726:	f04f 0300 	mov.w	r3, #0
 800272a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800272e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002732:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002736:	ebb2 0408 	subs.w	r4, r2, r8
 800273a:	eb63 0509 	sbc.w	r5, r3, r9
 800273e:	f04f 0200 	mov.w	r2, #0
 8002742:	f04f 0300 	mov.w	r3, #0
 8002746:	00eb      	lsls	r3, r5, #3
 8002748:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800274c:	00e2      	lsls	r2, r4, #3
 800274e:	4614      	mov	r4, r2
 8002750:	461d      	mov	r5, r3
 8002752:	eb14 030a 	adds.w	r3, r4, sl
 8002756:	603b      	str	r3, [r7, #0]
 8002758:	eb45 030b 	adc.w	r3, r5, fp
 800275c:	607b      	str	r3, [r7, #4]
 800275e:	f04f 0200 	mov.w	r2, #0
 8002762:	f04f 0300 	mov.w	r3, #0
 8002766:	e9d7 4500 	ldrd	r4, r5, [r7]
 800276a:	4629      	mov	r1, r5
 800276c:	028b      	lsls	r3, r1, #10
 800276e:	4621      	mov	r1, r4
 8002770:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002774:	4621      	mov	r1, r4
 8002776:	028a      	lsls	r2, r1, #10
 8002778:	4610      	mov	r0, r2
 800277a:	4619      	mov	r1, r3
 800277c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800277e:	2200      	movs	r2, #0
 8002780:	60bb      	str	r3, [r7, #8]
 8002782:	60fa      	str	r2, [r7, #12]
 8002784:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002788:	f7fd fd26 	bl	80001d8 <__aeabi_uldivmod>
 800278c:	4602      	mov	r2, r0
 800278e:	460b      	mov	r3, r1
 8002790:	4613      	mov	r3, r2
 8002792:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002794:	4b0b      	ldr	r3, [pc, #44]	; (80027c4 <HAL_RCC_GetSysClockFreq+0x180>)
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	0c1b      	lsrs	r3, r3, #16
 800279a:	f003 0303 	and.w	r3, r3, #3
 800279e:	3301      	adds	r3, #1
 80027a0:	005b      	lsls	r3, r3, #1
 80027a2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80027a4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80027a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80027ac:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80027ae:	e002      	b.n	80027b6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80027b0:	4b05      	ldr	r3, [pc, #20]	; (80027c8 <HAL_RCC_GetSysClockFreq+0x184>)
 80027b2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80027b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80027b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80027b8:	4618      	mov	r0, r3
 80027ba:	3740      	adds	r7, #64	; 0x40
 80027bc:	46bd      	mov	sp, r7
 80027be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80027c2:	bf00      	nop
 80027c4:	40023800 	.word	0x40023800
 80027c8:	00f42400 	.word	0x00f42400
 80027cc:	017d7840 	.word	0x017d7840

080027d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027d0:	b480      	push	{r7}
 80027d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80027d4:	4b03      	ldr	r3, [pc, #12]	; (80027e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80027d6:	681b      	ldr	r3, [r3, #0]
}
 80027d8:	4618      	mov	r0, r3
 80027da:	46bd      	mov	sp, r7
 80027dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e0:	4770      	bx	lr
 80027e2:	bf00      	nop
 80027e4:	20000000 	.word	0x20000000

080027e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80027ec:	f7ff fff0 	bl	80027d0 <HAL_RCC_GetHCLKFreq>
 80027f0:	4602      	mov	r2, r0
 80027f2:	4b05      	ldr	r3, [pc, #20]	; (8002808 <HAL_RCC_GetPCLK1Freq+0x20>)
 80027f4:	689b      	ldr	r3, [r3, #8]
 80027f6:	0a9b      	lsrs	r3, r3, #10
 80027f8:	f003 0307 	and.w	r3, r3, #7
 80027fc:	4903      	ldr	r1, [pc, #12]	; (800280c <HAL_RCC_GetPCLK1Freq+0x24>)
 80027fe:	5ccb      	ldrb	r3, [r1, r3]
 8002800:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002804:	4618      	mov	r0, r3
 8002806:	bd80      	pop	{r7, pc}
 8002808:	40023800 	.word	0x40023800
 800280c:	08002ff8 	.word	0x08002ff8

08002810 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8002810:	b084      	sub	sp, #16
 8002812:	b480      	push	{r7}
 8002814:	b085      	sub	sp, #20
 8002816:	af00      	add	r7, sp, #0
 8002818:	6078      	str	r0, [r7, #4]
 800281a:	f107 001c 	add.w	r0, r7, #28
 800281e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8002822:	2300      	movs	r3, #0
 8002824:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8002826:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8002828:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800282a:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800282c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800282e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8002830:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8002832:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8002834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8002836:	431a      	orrs	r2, r3
             Init.ClockDiv
 8002838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800283a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800283c:	68fa      	ldr	r2, [r7, #12]
 800283e:	4313      	orrs	r3, r2
 8002840:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800284a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800284e:	68fa      	ldr	r2, [r7, #12]
 8002850:	431a      	orrs	r2, r3
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8002856:	2300      	movs	r3, #0
}
 8002858:	4618      	mov	r0, r3
 800285a:	3714      	adds	r7, #20
 800285c:	46bd      	mov	sp, r7
 800285e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002862:	b004      	add	sp, #16
 8002864:	4770      	bx	lr

08002866 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8002866:	b480      	push	{r7}
 8002868:	b083      	sub	sp, #12
 800286a:	af00      	add	r7, sp, #0
 800286c:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8002874:	4618      	mov	r0, r3
 8002876:	370c      	adds	r7, #12
 8002878:	46bd      	mov	sp, r7
 800287a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287e:	4770      	bx	lr

08002880 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8002880:	b480      	push	{r7}
 8002882:	b083      	sub	sp, #12
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2203      	movs	r2, #3
 800288c:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800288e:	2300      	movs	r3, #0
}
 8002890:	4618      	mov	r0, r3
 8002892:	370c      	adds	r7, #12
 8002894:	46bd      	mov	sp, r7
 8002896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289a:	4770      	bx	lr

0800289c <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800289c:	b480      	push	{r7}
 800289e:	b083      	sub	sp, #12
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f003 0303 	and.w	r3, r3, #3
}
 80028ac:	4618      	mov	r0, r3
 80028ae:	370c      	adds	r7, #12
 80028b0:	46bd      	mov	sp, r7
 80028b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b6:	4770      	bx	lr

080028b8 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b085      	sub	sp, #20
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
 80028c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80028c2:	2300      	movs	r3, #0
 80028c4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	681a      	ldr	r2, [r3, #0]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80028d6:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80028dc:	431a      	orrs	r2, r3
                       Command->CPSM);
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 80028e2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80028e4:	68fa      	ldr	r2, [r7, #12]
 80028e6:	4313      	orrs	r3, r2
 80028e8:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	68db      	ldr	r3, [r3, #12]
 80028ee:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80028f2:	f023 030f 	bic.w	r3, r3, #15
 80028f6:	68fa      	ldr	r2, [r7, #12]
 80028f8:	431a      	orrs	r2, r3
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 80028fe:	2300      	movs	r3, #0
}
 8002900:	4618      	mov	r0, r3
 8002902:	3714      	adds	r7, #20
 8002904:	46bd      	mov	sp, r7
 8002906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290a:	4770      	bx	lr

0800290c <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800290c:	b480      	push	{r7}
 800290e:	b083      	sub	sp, #12
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	691b      	ldr	r3, [r3, #16]
 8002918:	b2db      	uxtb	r3, r3
}
 800291a:	4618      	mov	r0, r3
 800291c:	370c      	adds	r7, #12
 800291e:	46bd      	mov	sp, r7
 8002920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002924:	4770      	bx	lr

08002926 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8002926:	b480      	push	{r7}
 8002928:	b085      	sub	sp, #20
 800292a:	af00      	add	r7, sp, #0
 800292c:	6078      	str	r0, [r7, #4]
 800292e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	3314      	adds	r3, #20
 8002934:	461a      	mov	r2, r3
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	4413      	add	r3, r2
 800293a:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
}  
 8002940:	4618      	mov	r0, r3
 8002942:	3714      	adds	r7, #20
 8002944:	46bd      	mov	sp, r7
 8002946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294a:	4770      	bx	lr

0800294c <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800294c:	b480      	push	{r7}
 800294e:	b085      	sub	sp, #20
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
 8002954:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8002956:	2300      	movs	r3, #0
 8002958:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	681a      	ldr	r2, [r3, #0]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	685a      	ldr	r2, [r3, #4]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8002972:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8002978:	431a      	orrs	r2, r3
                       Data->DPSM);
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800297e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8002980:	68fa      	ldr	r2, [r7, #12]
 8002982:	4313      	orrs	r3, r2
 8002984:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800298a:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	431a      	orrs	r2, r3
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8002996:	2300      	movs	r3, #0

}
 8002998:	4618      	mov	r0, r3
 800299a:	3714      	adds	r7, #20
 800299c:	46bd      	mov	sp, r7
 800299e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a2:	4770      	bx	lr

080029a4 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b088      	sub	sp, #32
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
 80029ac:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80029b2:	2310      	movs	r3, #16
 80029b4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80029b6:	2340      	movs	r3, #64	; 0x40
 80029b8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80029ba:	2300      	movs	r3, #0
 80029bc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80029be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80029c2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80029c4:	f107 0308 	add.w	r3, r7, #8
 80029c8:	4619      	mov	r1, r3
 80029ca:	6878      	ldr	r0, [r7, #4]
 80029cc:	f7ff ff74 	bl	80028b8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 80029d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80029d4:	2110      	movs	r1, #16
 80029d6:	6878      	ldr	r0, [r7, #4]
 80029d8:	f000 f92e 	bl	8002c38 <SDMMC_GetCmdResp1>
 80029dc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80029de:	69fb      	ldr	r3, [r7, #28]
}
 80029e0:	4618      	mov	r0, r3
 80029e2:	3720      	adds	r7, #32
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bd80      	pop	{r7, pc}

080029e8 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b08a      	sub	sp, #40	; 0x28
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	60f8      	str	r0, [r7, #12]
 80029f0:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80029f8:	2307      	movs	r3, #7
 80029fa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80029fc:	2340      	movs	r3, #64	; 0x40
 80029fe:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002a00:	2300      	movs	r3, #0
 8002a02:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002a04:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a08:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002a0a:	f107 0310 	add.w	r3, r7, #16
 8002a0e:	4619      	mov	r1, r3
 8002a10:	68f8      	ldr	r0, [r7, #12]
 8002a12:	f7ff ff51 	bl	80028b8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8002a16:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a1a:	2107      	movs	r1, #7
 8002a1c:	68f8      	ldr	r0, [r7, #12]
 8002a1e:	f000 f90b 	bl	8002c38 <SDMMC_GetCmdResp1>
 8002a22:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8002a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	3728      	adds	r7, #40	; 0x28
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}

08002a2e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8002a2e:	b580      	push	{r7, lr}
 8002a30:	b088      	sub	sp, #32
 8002a32:	af00      	add	r7, sp, #0
 8002a34:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8002a36:	2300      	movs	r3, #0
 8002a38:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002a42:	2300      	movs	r3, #0
 8002a44:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002a46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a4a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002a4c:	f107 0308 	add.w	r3, r7, #8
 8002a50:	4619      	mov	r1, r3
 8002a52:	6878      	ldr	r0, [r7, #4]
 8002a54:	f7ff ff30 	bl	80028b8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8002a58:	6878      	ldr	r0, [r7, #4]
 8002a5a:	f000 fa61 	bl	8002f20 <SDMMC_GetCmdError>
 8002a5e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8002a60:	69fb      	ldr	r3, [r7, #28]
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	3720      	adds	r7, #32
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}

08002a6a <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8002a6a:	b580      	push	{r7, lr}
 8002a6c:	b088      	sub	sp, #32
 8002a6e:	af00      	add	r7, sp, #0
 8002a70:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8002a72:	2300      	movs	r3, #0
 8002a74:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8002a76:	2302      	movs	r3, #2
 8002a78:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8002a7a:	23c0      	movs	r3, #192	; 0xc0
 8002a7c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002a82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a86:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002a88:	f107 0308 	add.w	r3, r7, #8
 8002a8c:	4619      	mov	r1, r3
 8002a8e:	6878      	ldr	r0, [r7, #4]
 8002a90:	f7ff ff12 	bl	80028b8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8002a94:	6878      	ldr	r0, [r7, #4]
 8002a96:	f000 f9bd 	bl	8002e14 <SDMMC_GetCmdResp2>
 8002a9a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8002a9c:	69fb      	ldr	r3, [r7, #28]
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	3720      	adds	r7, #32
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}

08002aa6 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8002aa6:	b580      	push	{r7, lr}
 8002aa8:	b088      	sub	sp, #32
 8002aaa:	af00      	add	r7, sp, #0
 8002aac:	6078      	str	r0, [r7, #4]
 8002aae:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8002ab4:	2309      	movs	r3, #9
 8002ab6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8002ab8:	23c0      	movs	r3, #192	; 0xc0
 8002aba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002abc:	2300      	movs	r3, #0
 8002abe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002ac0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ac4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002ac6:	f107 0308 	add.w	r3, r7, #8
 8002aca:	4619      	mov	r1, r3
 8002acc:	6878      	ldr	r0, [r7, #4]
 8002ace:	f7ff fef3 	bl	80028b8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8002ad2:	6878      	ldr	r0, [r7, #4]
 8002ad4:	f000 f99e 	bl	8002e14 <SDMMC_GetCmdResp2>
 8002ad8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8002ada:	69fb      	ldr	r3, [r7, #28]
}
 8002adc:	4618      	mov	r0, r3
 8002ade:	3720      	adds	r7, #32
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd80      	pop	{r7, pc}

08002ae4 <SDMMC_CmdSetRelAddMmc>:
  * @param  SDIOx Pointer to SDIO register base
  * @param  RCA Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAddMmc(SDIO_TypeDef *SDIOx, uint16_t RCA)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b088      	sub	sp, #32
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
 8002aec:	460b      	mov	r3, r1
 8002aee:	807b      	strh	r3, [r7, #2]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = ((uint32_t)RCA << 16U);
 8002af0:	887b      	ldrh	r3, [r7, #2]
 8002af2:	041b      	lsls	r3, r3, #16
 8002af4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8002af6:	2303      	movs	r3, #3
 8002af8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8002afa:	2340      	movs	r3, #64	; 0x40
 8002afc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002afe:	2300      	movs	r3, #0
 8002b00:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002b02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b06:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002b08:	f107 0308 	add.w	r3, r7, #8
 8002b0c:	4619      	mov	r1, r3
 8002b0e:	6878      	ldr	r0, [r7, #4]
 8002b10:	f7ff fed2 	bl	80028b8 <SDIO_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_REL_ADDR, SDIO_CMDTIMEOUT);
 8002b14:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b18:	2103      	movs	r1, #3
 8002b1a:	6878      	ldr	r0, [r7, #4]
 8002b1c:	f000 f88c 	bl	8002c38 <SDMMC_GetCmdResp1>
 8002b20:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8002b22:	69fb      	ldr	r3, [r7, #28]
}
 8002b24:	4618      	mov	r0, r3
 8002b26:	3720      	adds	r7, #32
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bd80      	pop	{r7, pc}

08002b2c <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b088      	sub	sp, #32
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
 8002b34:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8002b3a:	230d      	movs	r3, #13
 8002b3c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8002b3e:	2340      	movs	r3, #64	; 0x40
 8002b40:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002b42:	2300      	movs	r3, #0
 8002b44:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002b46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b4a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002b4c:	f107 0308 	add.w	r3, r7, #8
 8002b50:	4619      	mov	r1, r3
 8002b52:	6878      	ldr	r0, [r7, #4]
 8002b54:	f7ff feb0 	bl	80028b8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8002b58:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b5c:	210d      	movs	r1, #13
 8002b5e:	6878      	ldr	r0, [r7, #4]
 8002b60:	f000 f86a 	bl	8002c38 <SDMMC_GetCmdResp1>
 8002b64:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8002b66:	69fb      	ldr	r3, [r7, #28]
}
 8002b68:	4618      	mov	r0, r3
 8002b6a:	3720      	adds	r7, #32
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bd80      	pop	{r7, pc}

08002b70 <SDMMC_CmdOpCondition>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @parame Argument: Argument used for the command
  * @retval HAL status
  */
uint32_t SDMMC_CmdOpCondition(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b088      	sub	sp, #32
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
 8002b78:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_OP_COND;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8002b82:	2340      	movs	r3, #64	; 0x40
 8002b84:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002b86:	2300      	movs	r3, #0
 8002b88:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002b8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b8e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002b90:	f107 0308 	add.w	r3, r7, #8
 8002b94:	4619      	mov	r1, r3
 8002b96:	6878      	ldr	r0, [r7, #4]
 8002b98:	f7ff fe8e 	bl	80028b8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8002b9c:	6878      	ldr	r0, [r7, #4]
 8002b9e:	f000 f981 	bl	8002ea4 <SDMMC_GetCmdResp3>
 8002ba2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8002ba4:	69fb      	ldr	r3, [r7, #28]
}
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	3720      	adds	r7, #32
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}

08002bae <SDMMC_CmdSwitch>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @parame Argument: Argument used for the command
  * @retval HAL status
  */
uint32_t SDMMC_CmdSwitch(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8002bae:	b580      	push	{r7, lr}
 8002bb0:	b088      	sub	sp, #32
 8002bb2:	af00      	add	r7, sp, #0
 8002bb4:	6078      	str	r0, [r7, #4]
 8002bb6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD6 to activate SDR50 Mode and Power Limit 1.44W */
  /* CMD Response: R1 */
  sdmmc_cmdinit.Argument         = Argument; /* SDMMC_SDR25_SWITCH_PATTERN */
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SWITCH;
 8002bbc:	2306      	movs	r3, #6
 8002bbe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8002bc0:	2340      	movs	r3, #64	; 0x40
 8002bc2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002bc8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002bcc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002bce:	f107 0308 	add.w	r3, r7, #8
 8002bd2:	4619      	mov	r1, r3
 8002bd4:	6878      	ldr	r0, [r7, #4]
 8002bd6:	f7ff fe6f 	bl	80028b8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_HS_SWITCH, SDIO_CMDTIMEOUT);
 8002bda:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bde:	2106      	movs	r1, #6
 8002be0:	6878      	ldr	r0, [r7, #4]
 8002be2:	f000 f829 	bl	8002c38 <SDMMC_GetCmdResp1>
 8002be6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8002be8:	69fb      	ldr	r3, [r7, #28]
}
 8002bea:	4618      	mov	r0, r3
 8002bec:	3720      	adds	r7, #32
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bd80      	pop	{r7, pc}

08002bf2 <SDMMC_CmdSendEXTCSD>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  Argument Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendEXTCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8002bf2:	b580      	push	{r7, lr}
 8002bf4:	b088      	sub	sp, #32
 8002bf6:	af00      	add	r7, sp, #0
 8002bf8:	6078      	str	r0, [r7, #4]
 8002bfa:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8002c00:	2308      	movs	r3, #8
 8002c02:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8002c04:	2340      	movs	r3, #64	; 0x40
 8002c06:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002c08:	2300      	movs	r3, #0
 8002c0a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002c0c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c10:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002c12:	f107 0308 	add.w	r3, r7, #8
 8002c16:	4619      	mov	r1, r3
 8002c18:	6878      	ldr	r0, [r7, #4]
 8002c1a:	f7ff fe4d 	bl	80028b8 <SDIO_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_HS_SEND_EXT_CSD,SDIO_CMDTIMEOUT);
 8002c1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c22:	2108      	movs	r1, #8
 8002c24:	6878      	ldr	r0, [r7, #4]
 8002c26:	f000 f807 	bl	8002c38 <SDMMC_GetCmdResp1>
 8002c2a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8002c2c:	69fb      	ldr	r3, [r7, #28]
}
 8002c2e:	4618      	mov	r0, r3
 8002c30:	3720      	adds	r7, #32
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}
	...

08002c38 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b088      	sub	sp, #32
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	60f8      	str	r0, [r7, #12]
 8002c40:	460b      	mov	r3, r1
 8002c42:	607a      	str	r2, [r7, #4]
 8002c44:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8002c46:	4b70      	ldr	r3, [pc, #448]	; (8002e08 <SDMMC_GetCmdResp1+0x1d0>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a70      	ldr	r2, [pc, #448]	; (8002e0c <SDMMC_GetCmdResp1+0x1d4>)
 8002c4c:	fba2 2303 	umull	r2, r3, r2, r3
 8002c50:	0a5a      	lsrs	r2, r3, #9
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	fb02 f303 	mul.w	r3, r2, r3
 8002c58:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8002c5a:	69fb      	ldr	r3, [r7, #28]
 8002c5c:	1e5a      	subs	r2, r3, #1
 8002c5e:	61fa      	str	r2, [r7, #28]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d102      	bne.n	8002c6a <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8002c64:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002c68:	e0c9      	b.n	8002dfe <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c6e:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8002c70:	69bb      	ldr	r3, [r7, #24]
 8002c72:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d0ef      	beq.n	8002c5a <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8002c7a:	69bb      	ldr	r3, [r7, #24]
 8002c7c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d1ea      	bne.n	8002c5a <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c88:	f003 0304 	and.w	r3, r3, #4
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d004      	beq.n	8002c9a <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	2204      	movs	r2, #4
 8002c94:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8002c96:	2304      	movs	r3, #4
 8002c98:	e0b1      	b.n	8002dfe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c9e:	f003 0301 	and.w	r3, r3, #1
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d004      	beq.n	8002cb0 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	2201      	movs	r2, #1
 8002caa:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8002cac:	2301      	movs	r3, #1
 8002cae:	e0a6      	b.n	8002dfe <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	22c5      	movs	r2, #197	; 0xc5
 8002cb4:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8002cb6:	68f8      	ldr	r0, [r7, #12]
 8002cb8:	f7ff fe28 	bl	800290c <SDIO_GetCommandResponse>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	461a      	mov	r2, r3
 8002cc0:	7afb      	ldrb	r3, [r7, #11]
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d001      	beq.n	8002cca <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e099      	b.n	8002dfe <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8002cca:	2100      	movs	r1, #0
 8002ccc:	68f8      	ldr	r0, [r7, #12]
 8002cce:	f7ff fe2a 	bl	8002926 <SDIO_GetResponse>
 8002cd2:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8002cd4:	697a      	ldr	r2, [r7, #20]
 8002cd6:	4b4e      	ldr	r3, [pc, #312]	; (8002e10 <SDMMC_GetCmdResp1+0x1d8>)
 8002cd8:	4013      	ands	r3, r2
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d101      	bne.n	8002ce2 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	e08d      	b.n	8002dfe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8002ce2:	697b      	ldr	r3, [r7, #20]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	da02      	bge.n	8002cee <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8002ce8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002cec:	e087      	b.n	8002dfe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8002cee:	697b      	ldr	r3, [r7, #20]
 8002cf0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d001      	beq.n	8002cfc <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8002cf8:	2340      	movs	r3, #64	; 0x40
 8002cfa:	e080      	b.n	8002dfe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8002cfc:	697b      	ldr	r3, [r7, #20]
 8002cfe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d001      	beq.n	8002d0a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8002d06:	2380      	movs	r3, #128	; 0x80
 8002d08:	e079      	b.n	8002dfe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8002d0a:	697b      	ldr	r3, [r7, #20]
 8002d0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d002      	beq.n	8002d1a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8002d14:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002d18:	e071      	b.n	8002dfe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d002      	beq.n	8002d2a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8002d24:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002d28:	e069      	b.n	8002dfe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d002      	beq.n	8002d3a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8002d34:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d38:	e061      	b.n	8002dfe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d002      	beq.n	8002d4a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8002d44:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002d48:	e059      	b.n	8002dfe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8002d4a:	697b      	ldr	r3, [r7, #20]
 8002d4c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d002      	beq.n	8002d5a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8002d54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d58:	e051      	b.n	8002dfe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8002d5a:	697b      	ldr	r3, [r7, #20]
 8002d5c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d002      	beq.n	8002d6a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8002d64:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002d68:	e049      	b.n	8002dfe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8002d6a:	697b      	ldr	r3, [r7, #20]
 8002d6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d002      	beq.n	8002d7a <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8002d74:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002d78:	e041      	b.n	8002dfe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8002d7a:	697b      	ldr	r3, [r7, #20]
 8002d7c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d002      	beq.n	8002d8a <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8002d84:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002d88:	e039      	b.n	8002dfe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8002d8a:	697b      	ldr	r3, [r7, #20]
 8002d8c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d002      	beq.n	8002d9a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8002d94:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d98:	e031      	b.n	8002dfe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d002      	beq.n	8002daa <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8002da4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002da8:	e029      	b.n	8002dfe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8002daa:	697b      	ldr	r3, [r7, #20]
 8002dac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d002      	beq.n	8002dba <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8002db4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002db8:	e021      	b.n	8002dfe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8002dba:	697b      	ldr	r3, [r7, #20]
 8002dbc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d002      	beq.n	8002dca <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8002dc4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002dc8:	e019      	b.n	8002dfe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8002dca:	697b      	ldr	r3, [r7, #20]
 8002dcc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d002      	beq.n	8002dda <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8002dd4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002dd8:	e011      	b.n	8002dfe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8002dda:	697b      	ldr	r3, [r7, #20]
 8002ddc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d002      	beq.n	8002dea <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8002de4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002de8:	e009      	b.n	8002dfe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	f003 0308 	and.w	r3, r3, #8
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d002      	beq.n	8002dfa <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8002df4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8002df8:	e001      	b.n	8002dfe <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8002dfa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	3720      	adds	r7, #32
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}
 8002e06:	bf00      	nop
 8002e08:	20000000 	.word	0x20000000
 8002e0c:	10624dd3 	.word	0x10624dd3
 8002e10:	fdffe008 	.word	0xfdffe008

08002e14 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8002e14:	b480      	push	{r7}
 8002e16:	b085      	sub	sp, #20
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8002e1c:	4b1f      	ldr	r3, [pc, #124]	; (8002e9c <SDMMC_GetCmdResp2+0x88>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a1f      	ldr	r2, [pc, #124]	; (8002ea0 <SDMMC_GetCmdResp2+0x8c>)
 8002e22:	fba2 2303 	umull	r2, r3, r2, r3
 8002e26:	0a5b      	lsrs	r3, r3, #9
 8002e28:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e2c:	fb02 f303 	mul.w	r3, r2, r3
 8002e30:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	1e5a      	subs	r2, r3, #1
 8002e36:	60fa      	str	r2, [r7, #12]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d102      	bne.n	8002e42 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8002e3c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002e40:	e026      	b.n	8002e90 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e46:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d0ef      	beq.n	8002e32 <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8002e52:	68bb      	ldr	r3, [r7, #8]
 8002e54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d1ea      	bne.n	8002e32 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e60:	f003 0304 	and.w	r3, r3, #4
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d004      	beq.n	8002e72 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2204      	movs	r2, #4
 8002e6c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8002e6e:	2304      	movs	r3, #4
 8002e70:	e00e      	b.n	8002e90 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e76:	f003 0301 	and.w	r3, r3, #1
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d004      	beq.n	8002e88 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2201      	movs	r2, #1
 8002e82:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8002e84:	2301      	movs	r3, #1
 8002e86:	e003      	b.n	8002e90 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	22c5      	movs	r2, #197	; 0xc5
 8002e8c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8002e8e:	2300      	movs	r3, #0
}
 8002e90:	4618      	mov	r0, r3
 8002e92:	3714      	adds	r7, #20
 8002e94:	46bd      	mov	sp, r7
 8002e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9a:	4770      	bx	lr
 8002e9c:	20000000 	.word	0x20000000
 8002ea0:	10624dd3 	.word	0x10624dd3

08002ea4 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b085      	sub	sp, #20
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8002eac:	4b1a      	ldr	r3, [pc, #104]	; (8002f18 <SDMMC_GetCmdResp3+0x74>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a1a      	ldr	r2, [pc, #104]	; (8002f1c <SDMMC_GetCmdResp3+0x78>)
 8002eb2:	fba2 2303 	umull	r2, r3, r2, r3
 8002eb6:	0a5b      	lsrs	r3, r3, #9
 8002eb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ebc:	fb02 f303 	mul.w	r3, r2, r3
 8002ec0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	1e5a      	subs	r2, r3, #1
 8002ec6:	60fa      	str	r2, [r7, #12]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d102      	bne.n	8002ed2 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8002ecc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002ed0:	e01b      	b.n	8002f0a <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ed6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d0ef      	beq.n	8002ec2 <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8002ee2:	68bb      	ldr	r3, [r7, #8]
 8002ee4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d1ea      	bne.n	8002ec2 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ef0:	f003 0304 	and.w	r3, r3, #4
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d004      	beq.n	8002f02 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2204      	movs	r2, #4
 8002efc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8002efe:	2304      	movs	r3, #4
 8002f00:	e003      	b.n	8002f0a <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	22c5      	movs	r2, #197	; 0xc5
 8002f06:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8002f08:	2300      	movs	r3, #0
}
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	3714      	adds	r7, #20
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f14:	4770      	bx	lr
 8002f16:	bf00      	nop
 8002f18:	20000000 	.word	0x20000000
 8002f1c:	10624dd3 	.word	0x10624dd3

08002f20 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8002f20:	b480      	push	{r7}
 8002f22:	b085      	sub	sp, #20
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8002f28:	4b11      	ldr	r3, [pc, #68]	; (8002f70 <SDMMC_GetCmdError+0x50>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a11      	ldr	r2, [pc, #68]	; (8002f74 <SDMMC_GetCmdError+0x54>)
 8002f2e:	fba2 2303 	umull	r2, r3, r2, r3
 8002f32:	0a5b      	lsrs	r3, r3, #9
 8002f34:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f38:	fb02 f303 	mul.w	r3, r2, r3
 8002f3c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	1e5a      	subs	r2, r3, #1
 8002f42:	60fa      	str	r2, [r7, #12]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d102      	bne.n	8002f4e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8002f48:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002f4c:	e009      	b.n	8002f62 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d0f1      	beq.n	8002f3e <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	22c5      	movs	r2, #197	; 0xc5
 8002f5e:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8002f60:	2300      	movs	r3, #0
}
 8002f62:	4618      	mov	r0, r3
 8002f64:	3714      	adds	r7, #20
 8002f66:	46bd      	mov	sp, r7
 8002f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6c:	4770      	bx	lr
 8002f6e:	bf00      	nop
 8002f70:	20000000 	.word	0x20000000
 8002f74:	10624dd3 	.word	0x10624dd3

08002f78 <memset>:
 8002f78:	4402      	add	r2, r0
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d100      	bne.n	8002f82 <memset+0xa>
 8002f80:	4770      	bx	lr
 8002f82:	f803 1b01 	strb.w	r1, [r3], #1
 8002f86:	e7f9      	b.n	8002f7c <memset+0x4>

08002f88 <__libc_init_array>:
 8002f88:	b570      	push	{r4, r5, r6, lr}
 8002f8a:	4d0d      	ldr	r5, [pc, #52]	; (8002fc0 <__libc_init_array+0x38>)
 8002f8c:	4c0d      	ldr	r4, [pc, #52]	; (8002fc4 <__libc_init_array+0x3c>)
 8002f8e:	1b64      	subs	r4, r4, r5
 8002f90:	10a4      	asrs	r4, r4, #2
 8002f92:	2600      	movs	r6, #0
 8002f94:	42a6      	cmp	r6, r4
 8002f96:	d109      	bne.n	8002fac <__libc_init_array+0x24>
 8002f98:	4d0b      	ldr	r5, [pc, #44]	; (8002fc8 <__libc_init_array+0x40>)
 8002f9a:	4c0c      	ldr	r4, [pc, #48]	; (8002fcc <__libc_init_array+0x44>)
 8002f9c:	f000 f818 	bl	8002fd0 <_init>
 8002fa0:	1b64      	subs	r4, r4, r5
 8002fa2:	10a4      	asrs	r4, r4, #2
 8002fa4:	2600      	movs	r6, #0
 8002fa6:	42a6      	cmp	r6, r4
 8002fa8:	d105      	bne.n	8002fb6 <__libc_init_array+0x2e>
 8002faa:	bd70      	pop	{r4, r5, r6, pc}
 8002fac:	f855 3b04 	ldr.w	r3, [r5], #4
 8002fb0:	4798      	blx	r3
 8002fb2:	3601      	adds	r6, #1
 8002fb4:	e7ee      	b.n	8002f94 <__libc_init_array+0xc>
 8002fb6:	f855 3b04 	ldr.w	r3, [r5], #4
 8002fba:	4798      	blx	r3
 8002fbc:	3601      	adds	r6, #1
 8002fbe:	e7f2      	b.n	8002fa6 <__libc_init_array+0x1e>
 8002fc0:	08003008 	.word	0x08003008
 8002fc4:	08003008 	.word	0x08003008
 8002fc8:	08003008 	.word	0x08003008
 8002fcc:	0800300c 	.word	0x0800300c

08002fd0 <_init>:
 8002fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fd2:	bf00      	nop
 8002fd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002fd6:	bc08      	pop	{r3}
 8002fd8:	469e      	mov	lr, r3
 8002fda:	4770      	bx	lr

08002fdc <_fini>:
 8002fdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fde:	bf00      	nop
 8002fe0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002fe2:	bc08      	pop	{r3}
 8002fe4:	469e      	mov	lr, r3
 8002fe6:	4770      	bx	lr
